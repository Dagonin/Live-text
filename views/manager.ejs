<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Text Live</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css" />
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
    <link rel="stylesheet" href="/css/tree.css" />
    <link rel="stylesheet" href="/css/style.css" />
	<link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400&display=swap" rel="stylesheet">
	<link href="/css/fontawesome/css/all.css" rel="stylesheet"> <!--load all styles -->
	<link href="//cdn.quilljs.com/1.0.0/quill.snow.css" rel="stylesheet">
<link href="//cdn.quilljs.com/1.0.0/quill.bubble.css" rel="stylesheet">
</head>

<body>
    
<!--
    <div class="columns">
        <div class="column list is-hoverable is-shadowless" id="tree"></div>
        <div class="maincont column is-three-quarters has-background-success">
            <div class="showq">
            </div>
E:/Z_C/programowanie/live-text/serwer

        </div>
    </div>
-->

	
<div id="m-header">
	<div id="m-tree">
		<div class="nav-left navbar"><a href="/tree" class="menu"><i class="fas fa-angle-left icon_mg" style="color:#3273dc"></i> Powrót do menu</a></div>
		
		<nav class="navbar has-background-info" role="navigation" aria-label="main navigation" style="display:none"></nav>
		<!--<div id="nav-side"><i class="fas fa-cog icon_mg"></i> Menadżer pytań</div>-->
        <div class="column list is-hoverable is-shadowless" id="tree" style="margin-top:40px;"></div>
	</div>
	<div id="m-rightside">
		<!-- przyciski -->
		<div id="m-rightbuttons" class="navbar">
		<button id="changestate" onclick="loadtest()">Wyświetl testy</button>
        <button class="navbut" onclick="navselect()">Dodaj Pytanie</button>
        <button class="navbut" onclick="rem()">Usuń</button>
        <button  class="navbut"onclick="test()">Stwórz test</button>
		</div>
        <div class="maincont column is-three-quarters">
			<!-- Brak pytan -->
			<span style="font-size:30px" class="f200"><i class="fas fa-exclamation-circle icon_mg"></i> Wygląda na to, że nie utworzyłeś jeszcze żadnynch pytań.</span><br>
			
			<a href="" class="link-button f300">Uruchom Kreator Pytań</a> <!-- Trzeba podpiac zeby dzialalo tak jak "Dodaj pytanie" -->
			<a href="" class="link-button f300" style="margin-left:10px">Załaduj testową bazę pytań</a>
			
			<br><br><br>
			
			<span class="f25 f200">Skorzystaj z pomocy jeśli nie wiesz jak utworzyć pytanie.</span><br><br>
			<!-- Zawartosc opcjonalna, mozna go umiescic jesli przygotujemy poradniki/dzial pomocy w pelnej wersji strony -->
			<div class="showq block-video">
				<!-- Bulma nadpisuje wysokosc, ktos cos? -->
				<iframe width="100%" height="315" style="height:315px" src="https://www.youtube.com/embed/-2LtZRi6Q0s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>			
			</div>
			
			<div class="showq block-tutorial">
				<span class="f25 f300">(2.0) Tworzenie pytań - Wprowadzenie</span><br>
				<span class="f20">Tworzenie pytań przedstawione krok po kroku.</span><br><br>	
				Poradnik stworzony w wersji pisemnej z zdjęciami dla osób, które mają pierwszy raz styczność z naszą platformą i mogą nie wiedzieć jak z niej korzystać. W tej części wytłumaczymy jak stworzyć
				pytanie krok po kroku i umieścić je w wybranej kategorii, tak aby osoby znajdujące się w twoim pokoju mogłyby na nie odpowiadać.
				<br>
				<span class="tutorial-button-run f300"><i class="far fa-play-circle icon_mg"></i> Uruchom poradnik</span><br>
			</div>
		</div>
	</div>
</div>
</body>
<script src="/js/tree.js"></script>
<script src="/js/treeselect.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<script src="/siofu/client.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>

<script>
    const socket = io();
    let chapters = <%-JSON.stringify(chapter)%> ;
    let questions = <%-JSON.stringify(question)%> ;
    let tests;
    let allquestions = <%-JSON.stringify(question)%> ;
    let rembool = false;
    let refreshbool = false;
    let remarrayq = [];
    let remarrayc = [];
    let testarr=[];
    let testbool = '';
    let statequestion = true;
    generateTree(chapters, questions);
    setClickEventOnTreeItems();

    
    
        function block(){
        $("p.list-item").off("click");
        $("p.list-item").attr("draggable","false");
        $("p.list-item").off("dragstart",drag);
        $(".cont").off("dragover",allowDrop);

    }
    function unblock(){
        block();
        $("p.list-item").on("click",this,showq);
        $("p.list-item").attr("draggable","true");
        $("p.list-item").on("dragstart",drag);
        $(".cont").on("dragover",allowDrop);
        $("input[name=rem]").remove();
        rembool = false;
        
    }
    
    

    
    
    
    //Wyświetlanie i edytowanie pytania

    function editq(e) {
        if(statequestion = true){
        let cont = $(".maincont");
         console.log($(e).attr("db-id"))
        let result = $.grep(allquestions, function(ev) {
            return ev._id == $(e).attr("db-id");
        })[0];
       
        eselect(result,$(e).attr("db-id"));
}
    }


    function showq(e) {
        
        let cont = $(".maincont");
        console.log(allquestions)
        let result = $.grep(allquestions, function(ev) {
            return ev._id == e.target.id;
        })[0];
        if (result.type == "open") {
            cont.html(`<div class="showq">
            <img src="`+result.zdj+`" alt="">
            <div>Etykieta pytania</div>
            <div>` + result.name + `</div>
            <div>Treść pytania</div>
            <div>` + result.content + `</div>            
        <button db-id="`+result._id+`" onclick="editq(this)" class="edit-question">Edytuj</button></div>`)

        } else if (result.type == "single") {
            let ans = '';
            let correct = "";
            for (let i = 0; i < result.option.length; i++) {
                if (result.option[i] == result.correct) {
                    correct = "   --Poprawna odpowiedź--";
                } else {
                    correct = "";
                }
                ans += `<div>Opdpowiedź ` + (i + 1) + `.</div>
             <div>` + result.option[i] + correct + `</div>`;

            }
            cont.html(`<div class="showq">
            <img src="`+result.zdj+`" alt="">
            <div>Etykieta pytania</div>
            <div>` + result.name + `</div>
            <div>Treść pytania</div>
            <div>` + result.content + `</div>            
            ` + ans + `<button db-id="`+result._id+`" onclick="editq(this)" class="edit-question">Edytuj</button></div>`)

        } else if (result.type == "multi") {
            let ans = '';
            let correct = "";
            for (let i = 0; i < result.option.length; i++) {
                if (jQuery.inArray(result.option[i], result.correct) != -1) {
                    correct = "   --Poprawna odpowiedź--";
                } else {
                    correct = "";
                }
                ans += `<div>Opdpowiedź ` + (i + 1) + `.</div>
             <div>` + result.option[i] + correct + `</div>`;

            }
            cont.html(`<div class="showq">
            <img src="`+result.zdj+`" alt="">
            <div>Etykieta pytania</div>
            <div>` + result.name + `</div>
            <div>Treść pytania</div>
            <div>` + result.content + `</div>            
            ` + ans + `<button db-id="`+result._id+`" onclick="editq(this)" class="edit-question">Edytuj</button></div>`)
        }
        $(".showq").attr("id", e.id);
    }
    // TWORZENIE TESTU
    
    
   function test(ev){
       unblock();
        if(rembool==false){
        
        rembool =true;
        block();
        $("p.list-item").append("<input name='rem' type='checkbox'>");
        $("input").css("float","right");
        $("p.list-item").on("click",(ev)=>{
           let input = ev.target.lastChild ;
            if(input.checked == false){
                input.checked = true;
            }else{
                input.checked = false;
            }
            testar(ev);
        });
            console.log(ev)
            if(ev&&typeof ev == "object"){
                for(let i =0;i<ev.length;i++){
                    $("#"+ev[i]).find("input").prop('checked', true);
                }
            }
            testar(ev);
            $(".cont").append("<input name='rem' onclick='testc(this)' type='checkbox'> ");

        }
    }
    
    

    

    function testc(e){
        let thisid = e.parentElement.id
        if(e.checked==true){
            $("#"+thisid).find("input").prop('checked', true);
        }else{
            $("#"+thisid).find("input").prop('checked', false);
        }
        testar();
    }
    unblock();
    socket.emit("gettree",socket.id,`<%= user.id %>`);
    function testar(ev){ 
        testarr=[];
    $(".maincont").html("")
    $("input:checked").each(function(){
        if(this.parentElement.tagName=="P"){
        testarr.push(this.parentElement.id);
            $(".maincont").append("<div>"+this.parentElement.innerText+"</div>")
        }
     });
    $(".maincont").append("<input placeholder='Podaj nazwe testu' type='text' id='testname'>")
        if(testbool==''){
    $(".maincont").append("<button onclick='createtest(testarr)'>Stwórz!</button>")
            }else{
                $(".maincont").append("<button onclick='etest(testarr)'>Edytuj!</button>")
            }
    }
    
    function createtest(testarr){
        socket.emit("ctest",socket.id,testarr,$("#testname").val(),`<%=user.id%>`);
        test()
    }
        function etest(testarr){
        socket.emit("etest",socket.id,testarr,$("#testname").val(),`<%=user.id%>`,testbool);
        testbool='';
            test()
    }
    // USUWANIE PYTAŃ I RODZIAŁÓW ORAZ TESTÓW


    function rem(){
        if(statequestion==true){
        unblock();
        if(rembool==false){
        rembool =true;
        block();
        $("p.list-item").append("<input name='rem' type='checkbox'>");
        $("input").css("float","right");
        $("p.list-item").on("click",(e)=>{
           let input = e.target.lastChild ;
            if(input.checked == false){
                input.checked = true;
            }else{
                input.checked = false;
            }
            remarr();
        });
        $(".cont").append("<input name='rem' onclick='remc(this)' type='checkbox'> ");

        }
        }
    }
    
    function testrem(){
        if(statequestion==false){
            block();
            $(".cont").append("<input name='rem' onclick='testr(this)' type='checkbox'> ");
        }
    }
    

    function testr(){
        tremarr=[];
        $(".maincont").html("")
        $("input:checked").each(function(){
        $(".maincont").append("<div>"+this.parentElement.innerText+"</div>")
        tremarr.push(this.parentElement.id);
     });
        $(".maincont").append("<button onclick='testdel(tremarr)'>Usuń!</button>")
    }

    
    
    function testdel(tremarr){
        socket.emit("treedeletetest",socket.id,tremarr)
    }
    
    
    function remc(e){
        let thisid = e.parentElement.id
        if(e.checked==true){
            $("#"+thisid).find("input").prop('checked', true);
        }else{
            $("#"+thisid).find("input").prop('checked', false);
        }
        remarr();
    }
    unblock();
    
    
    
    
    
    function remarr(){ 
    remarrayq = [];
    remarrayc = [];
    $(".maincont").html("")
    $("input:checked").each(function(){
        if(this.parentElement.tagName=="P"){
        remarrayq.push(this.parentElement.id);
        }else{
        remarrayc.push(this.parentElement.id);
        }
    $(".maincont").append("<div>"+this.parentElement.innerText+"</div>")
     });
    $(".maincont").append("<button onclick='deletethem(remarrayq,remarrayc)'>Usuń!</button>")
    }
    
        function deletethem(arrq,arrc){
        for( let i = 0; i < arrc.length; i++){ 
            if ( arrc[i] === "unassigned") {
                arrc.splice(i, 1); 
            }
        }
        for( let i = 0; i < arrc.length; i++){
            socket.emit("treedeletechapter",socket.id,arrc[i],`<%= user.id %> `);
        }
            let updatearr = [];
            let chapterarr = [];
    console.log(arrc,arrq)
    console.log(allquestions)
               for( let i = 0; i < arrq.length; i++){
                   
                   let thisq = $.grep(allquestions, function(ev) {
                return ev._id == arrq[i];
                    })[0];
                   if(jQuery.inArray(thisq.chapter, arrc)==-1){
                   if(jQuery.inArray(thisq.chapter, chapterarr)==-1){
                       chapterarr.push(thisq.chapter);
                       let index = jQuery.inArray(thisq.chapter, chapterarr);
                       if(updatearr[index]==undefined){
                           updatearr[index] = [];
                           updatearr[index].push(thisq._id);
                       }else{
                           updatearr[index].push(thisq._id);
                       }
                       
                   }else{
                       let index = jQuery.inArray(thisq.chapter, chapterarr);
                       updatearr[index].push(thisq._id);
                   }
                       }
                   
        }
                console.log(chapterarr)
                   console.log(updatearr)
            socket.emit("treedeletequestion",socket.id,arrq,`<%= user.id %> `);
            socket.emit("treetestupdate",socket.id,arrq,`<%= user.id %>`)
            socket.emit("treechapterupdate",socket.id,arrq,`<%= user.id %>`)
            if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },3500)
            }
            
            
        }



    var scroll = function(step) {
        var scrollY = $(window).scrollTop();
        $(window).scrollTop(scrollY + step);
        if (!stop) {
            setTimeout(function() {
                scroll(step)
            }, 20);
        }
    }

    // DRAG & DROP
    var stop = true;
    $("p.list-item").on("drag", function(e) {

        stop = true;

        if (e.originalEvent.clientY < 150) {
            stop = false;
            scroll(-1)
        }

        if (e.originalEvent.clientY > ($(window).height() - 150)) {
            stop = false;
            scroll(1)
        }

    });

    $("p.list-item").on("dragend", function(e) {
        stop = true;
    });

    let srcid;

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        srcid = ev.target.id;
    }

    function drop(ev) {
        ev.preventDefault();

        if (ev.path[3].className.includes('cont') && ev.path[1].className.includes('icon')) {
            socket.emit("move", socket.id, srcid, ev.path[3].id, `<%= user.id %>`);
        } else if (ev.path[4].className.includes('cont') && ev.path[2].className.includes('icon')) {
            socket.emit("move", socket.id, srcid, ev.path[4].id, `<%= user.id %>`);
        } else if (ev.target.className == "dir-header") {
            socket.emit("move", socket.id, srcid, ev.target.parentElement.id, `<%= user.id %>`);

        } else if (ev.target.className.includes("cont")) {
            socket.emit("move", socket.id, srcid, ev.target.id, `<%= user.id %>`);
        } else if (ev.target.className.includes("list-item")) {
            socket.emit("move", socket.id, srcid, ev.target.parentElement.parentElement.parentElement.id, `<%= user.id %>`);
        }
    }
    
    
    
    

    
    function addchapter() {
        $("#err").html("");
        let errorcheck = false;
        let error = [];
        if ($('#chaptername').val() == "") {
            errorcheck = true;
            error.push("<div>Nazwa rozdziału jest pusta</div>");
        }
        if ($('#chaptercontent').val() == "") {
            errorcheck = true;
            error.push("<div>Opisz rozdziału jest pusty</div>");
        }
        if (errorcheck == false) {
            socket.emit("dodaj", socket.id, $('#chaptername').val(), "addchapter", $('#chaptercontent').val(), undefined, undefined, `<%= user.id %>`);
        } else {
            $("#err").html(error);
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },1000)
            }
        select("chapter");
    }

    function addsingle(check,qid) {
        let src;
        if($("#qimgsrc")){
            src = $("#qimgsrc").attr("src");
        }
        console.log(src);
        $("#err").html("");
        let errorcheck = false;
        let error = [];
        let x = 1;
        let corr = "";
        let ansid = parseInt($("input[name='ans']:checked").attr('value'));
        let arr = [];
        console.log(ansid+1);
        
        $(".a").each(function() {
            x++;
            console.log(x);
            if(x==2){
                if(window.quill2.container.firstChild.innerHTML!=""){
                arr.push(window.quill2.container.firstChild.innerHTML)
                    if(ansid+1==x){
                        corr = window.quill2.container.firstChild.innerHTML;
                        console.log(corr,x);
                    }
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }            
            if(x==3){
                if(window.quill3.container.firstChild.innerHTML!=""){
                arr.push(window.quill3.container.firstChild.innerHTML);
                    if(ansid+1==x){
                        corr = window.quill3.container.firstChild.innerHTML;
                        console.log(corr,x);
                    }
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }            
            if(x==4){
                if(window.quill4.container.firstChild.innerHTML!=""){
                arr.push(window.quill4.container.firstChild.innerHTML)
                    if(ansid+=1==x){
                        corr = window.quill4.container.firstChild.innerHTML;
                    }
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }            
            if(x==5){
                if(window.quill5.container.firstChild.innerHTML!=""){
                arr.push(window.quill5.container.firstChild.innerHTML);
                if(ansid+=1==x){
                        corr = window.quill5.container.firstChild.innerHTML;
                    }
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }
        })
        if ($('#singlename').val() == "") {
            errorcheck = true;
            error.push("<div>Etykieta pytania jest pusta</div>");
        }
        if (window.quill1.container.firstChild.innerHTML == "") {
            errorcheck = true;
            error.push("<div>Treść pytania jest pusta</div>");
        }

        if (corr == "") {
            errorcheck = true;
            error.push("<div>Nie zaznaczono poprawnej odpowiedzi</div>");
        }

        if (errorcheck == false) {
            if(check=="add"){
                socket.emit("dodaj", socket.id, $('#singlename').val(), "single", window.quill1.container.firstChild.innerHTML, arr, corr, `<%= user.id %>`,src);
            }else if(check=="edit"){
                socket.emit("edit", socket.id, $('#singlename').val(), "single", window.quill1.container.firstChild.innerHTML, arr, corr, `<%= user.id %>`,src,qid);
               $("#"+qid).html(`<span class="icon"> <svg class="svg-inline--fa fa-calendar-check fa-w-14" aria-hidden="true" data-prefix="fas" data-icon="calendar-check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M436 160H12c-6.627 0-12-5.373-12-12v-36c0-26.51 21.49-48 48-48h48V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h128V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h48c26.51 0 48 21.49 48 48v36c0 6.627-5.373 12-12 12zM12 192h424c6.627 0 12 5.373 12 12v260c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V204c0-6.627 5.373-12 12-12zm333.296 95.947l-28.169-28.398c-4.667-4.705-12.265-4.736-16.97-.068L194.12 364.665l-45.98-46.352c-4.667-4.705-12.266-4.736-16.971-.068l-28.397 28.17c-4.705 4.667-4.736 12.265-.068 16.97l82.601 83.269c4.667 4.705 12.265 4.736 16.97.068l142.953-141.805c4.705-4.667 4.736-12.265.068-16.97z"></path></svg><!-- <i class="fas fa-calendar-check"></i> --> </span>`+$('#singlename').val())
            }
            
        } else {
            $("#err").html(error);
            console.log(arr)
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },300)
                        
            }
        unblock();
        socket.emit("gettree",socket.id,`<%= user.id %>`);
        select("single");
    }

    

    
    
    function addopen(check,qid) {
        let src;
        if($("#qimgsrc")){
            src = $("#qimgsrc").attr("src");
        }
        $("#err").html("");
        console.log(window.quill1.container.firstChild.innerHTML)
        let errorcheck = false;
        let error = [];
        if ($('#openname').val() == "") {
            errorcheck = true;
            error.push("<div>Etykieta pytania jest pusta</div>");
        }
        if (window.quill1.container.firstChild.innerHTML == "") {
            errorcheck = true;
            error.push("<div>Treść pytania jest pusta</div>");
        }
        if (errorcheck == false) {
            if(check=="add"){
            socket.emit("dodaj", socket.id, $('#openname').val(), "open", window.quill1.container.firstChild.innerHTML, undefined, undefined, `<%= user.id %>`,src);
                }else if(check=="edit"){
                   socket.emit("edit", socket.id, $('#openname').val(), "open", window.quill1.container.firstChild.innerHTML, undefined, undefined, `<%= user.id %>`,src,qid);
                    $("#"+qid).html(`<span class="icon"> <svg class="svg-inline--fa fa-calendar-minus fa-w-14" aria-hidden="true" data-prefix="fas" data-icon="calendar-minus" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm304 192c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H132c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h184z"></path></svg><!-- <i class="fas fa-calendar-minus"></i> --> </span>`+$('#openname').val())
                }
        } else {
            $("#err").html(error);
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },300)
                        
            }
        unblock();
        socket.emit("gettree",socket.id,`<%= user.id %>`);
        select("open");
    }

    function addmulti(check,qid) {
                let src;
        if($("#qimgsrc")){
            src = $("#qimgsrc").attr("src");
        }
                $("#err").html("");
        let errorcheck = false;
        let error = [];
        let x = 1;
        let corr = [];
        let arr = [];
        
        $(".a").each(function() {
            x++;
            if(x==2){
                if(window.quill2.container.firstChild.innerHTML!=""){
                arr.push(window.quill2.container.firstChild.innerHTML)
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }            
            if(x==3){
                if(window.quill3.container.firstChild.innerHTML!=""){
                arr.push(window.quill3.container.firstChild.innerHTML);
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }            
            if(x==4){
                if(window.quill4.container.firstChild.innerHTML!=""){
                arr.push(window.quill4.container.firstChild.innerHTML)
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }            
            if(x==5){
                if(window.quill5.container.firstChild.innerHTML!=""){
                arr.push(window.quill5.container.firstChild.innerHTML);
                }else{
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
                }
            }
        })
        if ($('#multiname').val() == "") {
            errorcheck = true;
            error.push("<div>Etykieta pytania jest pusta</div>");
        }
        if (window.quill1.container.firstChild.innerHTML == "") {
            errorcheck = true;
            error.push("<div>Treść pytania jest pusta</div>");
        }


        $("input[name='ans']:checked").each(function() {
            let ansid = parseInt(this.value)+1;
            if(ansid==2){
             corr.push(window.quill2.container.firstChild.innerHTML);      
            }            
            if(ansid==3){
             corr.push(window.quill3.container.firstChild.innerHTML);      
            }            
            if(ansid==4){
             corr.push(window.quill4.container.firstChild.innerHTML);      
            }            
            if(ansid==5){
             corr.push(window.quill5.container.firstChild.innerHTML);      
            }


        })
        
                if (corr == "") {
            errorcheck = true;
            error.push("<div>Nie zaznaczono poprawnej odpowiedzi</div>");
        }

        
        if (errorcheck == false) {
            if(check=="add"){
            socket.emit("dodaj", socket.id, $('#multiname').val(), "multi", window.quill1.container.firstChild.innerHTML, arr, corr, `<%= user.id %>`,src);
            } else if(check=="edit"){
                socket.emit("edit", socket.id, $('#multiname').val(), "multi", window.quill1.container.firstChild.innerHTML, arr, corr, `<%= user.id %>`,src,qid);
                $("#"+qid).html(`<span class="icon"> <svg class="svg-inline--fa fa-calendar-alt fa-w-14" aria-hidden="true" data-prefix="fas" data-icon="calendar-alt" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor" d="M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm116 204c0-6.6-5.4-12-12-12H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm0-128c0-6.6-5.4-12-12-12H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm128 128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm0-128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm128 128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm0-128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40z"></path></svg><!-- <i class="fas fa-calendar-alt"></i> --> </span>`+$('#multiname').val())
            }
        } else {
            $("#err").html(error);
            console.log(arr)
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },300)
                        
            }
        unblock();
        socket.emit("gettree",socket.id,`<%= user.id %>`);
        select("multi")
    }

    /////// SOCKET.IO /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //    socid, name, type, content, options, correct, userid

    
    // UPLOADOWANIE ZDJĘĆ

    socket.on('connect', () => {
        console.log(socket.id);
    })
    
    socket.on("reloadtree",(nchapters,nquestions)=>{
        chapters = nchapters;
        questions = nquestions;
        allquestions = nquestions;
        unblock();
        generateTree(chapters, questions);
        setClickEventOnTreeItems();
        socket.emit("gettree",socket.id,`<%= user.id %>`);
    })
    
    socket.on("uploaded",(ev)=>{
        console.log(ev.file)
        if($("#qimg")){
            $("#qimg").html(`<img id='qimgsrc' src="`+ev.file.pathName.substr(6)+`" alt=""><button  onclick="deleteimage()">Usuń obraz</button>`)
        }
    })

    socket.on("newtree",(nchapters,nquestions)=>{
        chapters = nchapters;
        questions = nquestions;
        allquestions = nquestions;
        unblock();
        console.log("NEW "+ allquestions)
    })
    
    socket.on("newtests",(ntests,nquestions)=>{
        tests = ntests;
        questions = nquestions;
        allquestions = nquestions;
        unblock();
        generateTestTree(tests, questions);
//        setClickEventOnTreeItems();
//        console.log(questions)
//        $("#unassigned").remove()
    })
    
    
    function loadtest(){
        if(statequestion == true){
        $(".navbut").hide();
        testbool="";
        unblock();
        socket.emit("gettests",socket.id,`<%=user.id%>`);
        socket.emit("gettree",socket.id,`<%= user.id %>`);
        statequestion = false;
        $("#changestate").text("Wyświetl pytania")
        setTimeout(function(){
        $("p.list-item").attr("draggable","false");
        $("p.list-item").off("dragstart",drag);
        $(".cont").off("dragover",allowDrop);
        },200)
        }else{
            unblock()
            $(".navbut").show();
            testbool="";
            socket.emit("rtree",socket.id,`<%= user.id %>`);
            $("#changestate").text("Wyświetl testy");
            statequestion = true;
        }
        
    }
    
    function edittest(e){
        generateTree(chapters, questions);
        setClickEventOnTreeItems();
        testbool = e;
        test(tests[tests.findIndex(x=>x._id===e)].questions)
    }
    
    socket.on("treedelete",(treeid)=>{
        console.log(treeid)
        for(let i =0;i<treeid.length;i++){
            $("#"+treeid[i]).remove();
        }
    })

    socket.on('cChapter', (cChapter) => {

        chapters.push(cChapter);
        $(`<div class='dir cont list-item' id="` +
            cChapter._id +
            `"ondrop="drop(event, this)" ondragover="allowDrop(event)">
    <div class='dir-header' db-id=` +
            cChapter._id +
            `>
      <span class='icon'><i class='fas fa-folder'></i></span> ` +
            cChapter.name +
            `
      <span class='icon is-pulled-right arrow'
        ><i class='fas fa-angle-right'></i
      ></span>
    </div>
    <div class='dir-items'><div class="dir-items-wrapper">
            </div></div></div>`).insertBefore('div#unassigned')

        setClickEventOnTreeItems();




    })

    socket.on('cQuestion', (question) => {
        questions.push(question);
        let div = $("#unassigned").find('.dir-items-wrapper');
        if (question.type == "open") {
            div.append(
                `<p class="list-item" id="` +
                question._id +
                `"title="` +
                question.content +
                `" draggable = 'true' ondragstart="drag(event)">
      <span class="icon"> <i class="fas fa-calendar-minus"></i> </span
      >` +
                question.name +
                `</p>`
            )
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '+=43');
            }
        } else if (question.type == "single") {
            div.append(
                `<p class="list-item" id="` +
                question._id +
                `"title="` +
                question.content +
                `" draggable = 'true' ondragstart="drag(event)">
      <span class="icon"> <i class="fas fa-calendar-check"></i> </span
      >` +
                question.name +
                `</p>`
            )
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '+=43');
            }
        } else if (question.type == "multi") {
            div.append(
                `<p class="list-item" id="` +
                question._id +
                `"title="` +
                question.content +
                `" draggable = 'true' ondragstart="drag(event)">
        <span class="icon"> <i class="fas fa-calendar-alt"></i> </span
        >` +
                question.name +
                `</p>`
            )
        }
        if ($("#unassigned").hasClass("opened-item")) {
            $("#unassigned").find('.dir-items').css('height', '+=43');
        }

    })

    socket.on('refreshTree', (src, target, sourcediv, newChapters, newQuestions) => {
        chapters = newChapters;
        questions = newQuestions;
        
        allquestions = newQuestions;
        if (sourcediv != undefined) {

            const srcindex = chapters.findIndex(x => x._id === sourcediv);
            const srcdir = chapters[srcindex].questions;
            const srccontent = generateTreeItems(srcdir, questions);
            $("#" + sourcediv).find('.dir-items-wrapper').html(srccontent);
            if ($("#" + sourcediv).hasClass("opened-item")) {
                $("#" + sourcediv).find('.dir-items').css('height', '-=43');
            }

        } else {
            const srcdir = [];
            newQuestions.forEach(question => {
                if (!question.chapter) {
                    srcdir.push(question._id)
                }
            });
            const srccontent = generateTreeItems(srcdir, questions);
            $("#unassigned").find('.dir-items-wrapper').html(srccontent);
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '-=43');
            }
        }

        if (target != 'unassigned') {
            const targetindex = chapters.findIndex(x => x._id === target);
            const targetdir = chapters[targetindex].questions;
            const targetcontent = generateTreeItems(targetdir, questions);
            $("#" + target).find('.dir-items-wrapper').html(targetcontent);
            if ($("#" + target).hasClass("opened-item")) {
                $("#" + target).find('.dir-items').css('height', '+=43');
            }
        } else {
            const targetdir = [];
            newQuestions.forEach(question => {
                if (!question.chapter) {
                    targetdir.push(question._id)
                }
            });
            const targetcontent = generateTreeItems(targetdir, questions);
            $("#unassigned").find('.dir-items-wrapper').html(targetcontent);
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '+=43');
            }



        }




        
     unblock();
        socket.emit("gettree",socket.id,`<%= user.id %>`);
    })
            socket.on('newtest',(test)=>{
            console.log("asd")
            console.log(test)
        })
</script>

</html>
