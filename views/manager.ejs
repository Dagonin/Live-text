<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Text Live</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css" />
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
    <link rel="stylesheet" href="/css/tree.css" />
</head>

<body>
    <nav class="navbar has-background-info" role="navigation" aria-label="main navigation"></nav>
    <% if(user){%>
    <div class="columns">
        <div class="column list is-hoverable is-shadowless" id="tree"></div>
        <% }%>
        <div class="column is-three-quarters has-background-success"></div>
    </div>
    <script src="/js/tree.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-1.11.1.js"></script>
    <script>
        let chapters = <%- JSON.stringify(chapter) %> ;
        let questions = <%- JSON.stringify(question) %> ;

        function add(name, type, content, options, correct) {
            post("/tree", [name, type, content, options]);
        }

        function del(id, type) {
            post("/tree", [id, type]);
        }

        function move(id, to) {
            post("/tree", [id, 'move', to]);
        }

        function ctest(arrayofquestions, name) {
            post("/tree", ["ctest", arrayofquestions, name]);
        }

        function post(path, params, method = "post") {
            // The rest of this code assumes you are not using a library.
            // It can be made less wordy if you use one.
            const form = document.createElement("form");
            form.method = method;
            form.action = path;
            for (const key in params) {
                if (params.hasOwnProperty(key)) {
                    const hiddenField = document.createElement("input");
                    hiddenField.type = "hidden";
                    hiddenField.name = key;
                    hiddenField.value = params[key];
                    form.appendChild(hiddenField);
                }
            }
            document.body.appendChild(form);
            form.submit();
        }

        generateTree(chapters,questions);
        setClickEventOnTreeItems();


        // DRAG & DROP
        let srcid;
        function allowDrop(ev) {
            ev.preventDefault();
        }

        function drag(ev) {
            srcid = ev.srcElement.id;
        }

        function drop(ev) {
            ev.preventDefault();
//            console.log(ev.target.parentElement.id);
            
            if(ev.path[3].className.includes('cont')&& ev.path[1].className.includes('icon')){
                socket.emit("move",socket.id,srcid,ev.path[3].id,"<%= user.id %>");
            }else if(ev.path[4].className.includes('cont')&& ev.path[2].className.includes('icon')){
                socket.emit("move",socket.id,srcid,ev.path[4].id,"<%= user.id %>");
            }else if(ev.target.className=="dir-header"){
            socket.emit("move",socket.id,srcid,ev.target.parentElement.id,"<%= user.id %>");
                        
            }else if(ev.target.className.includes("cont")){
                socket.emit("move",socket.id,srcid,ev.target.id,"<%= user.id %>");
            }else if (ev.target.className.includes("list-item")){
                    socket.emit("move",socket.id,srcid,ev.target.parentElement.parentElement.parentElement.id,"<%= user.id %>");
                }
            }
                



        /////// SOCKET.IO

        const socket = io();
        socket.on('connect', () => {
            console.log(socket.id);
        })

        function add(name, type, content, options, correct) {
//            post("/tree", [name, type, content, options]);
                        socket.emit("dodaj", socket.id, name, type, content, options, correct, "<%= user.id %>" );
        }


        socket.on('cChapter', (cChapter) => {
                            
            chapters.push(cChapter);
//                            console.log(chapters)
//                            console.log(questions)
            generateTree(chapters, <%- JSON.stringify(question) %>);
            setClickEventOnTreeItems();

        })
        
                socket.on('cQuestion', (cQuestion) => {
                            
            questions.push(cQuestion);
//                            console.log(chapters)
//                            console.log(questions)
            generateTree(chapters, <%- JSON.stringify(question) %>);
            setClickEventOnTreeItems();

        })
        
        
        
        socket.on('refreshTree',(src,target,sourcediv,newChapters,newQuestions)=>{
            console.log(src,target,sourcediv,newChapters,newQuestions);
            chapters = newChapters;
            questions = newQuestions;
            if(sourcediv!=undefined){

            const srcindex = chapters.findIndex(x => x._id ===sourcediv);
            const srcdir = chapters[srcindex].questions;
            const srccontent = generateTreeItems(srcdir, questions);
            $("#"+sourcediv).find('.dir-items-wrapper').html(srccontent);
            const srcheight =  $("#"+sourcediv).find('.dir-items').height();
            if($("#"+sourcediv).hasClass("opened-item")){
                $("#"+sourcediv).find('.dir-items').height(srcheight-42,5);
            }

            } else{
            const srcdir = [];
            newQuestions.forEach(question =>{
            if(!question.chapter){
                srcdir.push(question._id)
            }
            });
            const srccontent = generateTreeItems(srcdir, questions);
            $("#unassigned").find('.dir-items-wrapper').html(srccontent);
            const srcheight =  $("#unassigned").find('.dir-items').height();
            if($("#unassigned").hasClass("opened-item")){
            $("#unassigned").find('.dir-items').height(srcheight-42,5);
            }
            }
            
            if(target!='unassigned'){
            const targetindex = chapters.findIndex(x => x._id ===target);
            const targetdir = chapters[targetindex].questions;
            const targetcontent = generateTreeItems(targetdir,questions);
            $("#"+target).find('.dir-items-wrapper').html(targetcontent);
            const targetheight =  $("#"+target).find('.dir-items').height();
            if($("#"+target).hasClass("opened-item")){
                $("#"+target).find('.dir-items').height(targetheight+42,5);
            }
            }else{
            const targetdir = [];
            newQuestions.forEach(question =>{
            if(!question.chapter){
                targetdir.push(question._id)
            }
            });
            const targetcontent = generateTreeItems(targetdir, questions);
            $("#unassigned").find('.dir-items-wrapper').html(targetcontent);
            const targetheight =  $("#unassigned").find('.dir-items').height();
            if($("#unassigned").hasClass("opened-item")){
            $("#unassigned").find('.dir-items').height(targetheight+42,5);
            }       
                
                
                
            }
                
                
            
        })

            const addtreequestion = (targetid,qid,content,title,sourcediv)=>{
                const target = $("#"+targetid);
                const srcdir = $("#"+sourcediv);
    target.append(`<p class="list-item" id="` +qid +`"title="` +content +`" draggable = 'true' ondragstart="drag(event)"><span class="icon"> <i class="fas fa-calendar-minus"></i> </span>` +
                  title +`</p>`)
}
            


    </script>
</body>

</html>
