<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Text Live</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css" />
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
    <link rel="stylesheet" href="/css/tree.css" />
    <link rel="stylesheet" href="/css/style.css" />
	<link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400&display=swap" rel="stylesheet">
	<link href="/css/fontawesome/css/all.css" rel="stylesheet"> <!--load all styles -->
</head>

<body>
    <nav class="navbar has-background-info" role="navigation" aria-label="main navigation">
		<div style="width:20%;background:#141414;height:52px;line-height:52px;float:left;color:#999;padding-left:30px;box-sizing:border-box;"><i class="fas fa-angle-left icon_mg" style="color:#3273dc"></i> Powrót do menu</div>
        <button onclick="navselect()">Dodaj Pytanie</button>
        <button onclick="block()">block</button>
        <button onclick="unblock()">unblock</button>
        <button onclick="rem()">rem</button>
    </nav>
	
	
<!--
    <div class="columns">
        <div class="column list is-hoverable is-shadowless" id="tree"></div>
        <div class="maincont column is-three-quarters has-background-success">
            <div class="showq">
            </div>


        </div>
    </div>
-->
	
<div id="m-header">
	<div id="m-tree">
		<nav class="navbar has-background-info" role="navigation" aria-label="main navigation" style="display:none"></nav>
		<!--<div id="nav-side"><i class="fas fa-cog icon_mg"></i> Menadżer pytań</div>-->
        <div class="column list is-hoverable is-shadowless" id="tree" style="margin-top:40px;"></div>
	</div>
	<div id="m-rightside">
        <div class="maincont column is-three-quarters">
			<!-- Brak pytan -->
			<span style="font-size:30px" class="f200"><i class="far fa-meh icon_mg"></i> Wygląda na to, że nie utworzyłeś jeszcze żadnynch pytań.</span><br>
			
			<a href="" class="link-button f300">Uruchom Kreator Pytań</a>
			<a href="" class="link-button f300" style="margin-left:10px">Załaduj testową bazę pytań</a>
			
			<br><br><br>
			
			<span class="f25 f200">Skorzystaj z pomocy jeśli nie wiesz jak utworzyć pytanie.</span><br><br>
			
			<!-- Zawartosc opcjonalna, mozna go umiescic jesli przygotujemy poradniki/dzial pomocy w pelnej wersji strony -->
			<div class="showq block-video">
				<!-- Bulma nadpisuje wysokosc, ktos cos? -->
				<iframe width="100%" height="315" style="height:315px" src="https://www.youtube.com/embed/-2LtZRi6Q0s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>			
			</div>
			
			<div class="showq block-tutorial">
				<span class="f25 f300">(2.0) Tworzenie pytań - Wprowadzenie</span><br>
				<span class="f20">Tworzenie pytań przedstawione krok po kroku.</span><br><br>	
				Poradnik stworzony w wersji pisemnej z zdjęciami dla osób, które mają pierwszy raz styczność z naszą platformą i mogą nie wiedzieć jak z niej korzystać. W tej części wytłumaczymy jak stworzyć
				pytanie krok po kroku i umieścić je w wybranej kategorii, tak aby osoby znajdujące się w twoim pokoju mogłyby na nie odpowiadać.
				<br>
				<span class="tutorial-button-run f300"><i class="far fa-play-circle icon_mg"></i> Uruchom poradnik</span><br>
			</div>
		</div>
	</div>
</div>

</body>
<script src="/js/tree.js"></script>
<script src="/js/treeselect.js"></script>

<script src="/socket.io/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>

<script>
    let chapters = <%-JSON.stringify(chapter)%> ;
    let questions = <%-JSON.stringify(question)%> ;
    let allquestions = <%-JSON.stringify(question)%> ;
    let rembool = false;
    let refreshbool = false;
    let remarrayq = [];
    let remarrayc = [];
    generateTree(chapters, questions);
    setClickEventOnTreeItems();

    
    
    
    

    
    
    
    //Wyświetlanie i edytowanie pytania

    function editq(e) {
        let cont = $(".showq");
        let eid = cont.attr("id");
        let result = $.grep(allquestions, function(ev) {
            return ev._id == eid;
        })[0];
        console.log(result)
        

    }


    function showq(e) {

        let cont = $(".maincont");
        let result = $.grep(allquestions, function(ev) {
            return ev._id == e.target.id;
        })[0];
        if (result.type == "open") {
            cont.html(`<div class="showq">
            <div>Etykieta pytania</div>
            <div>` + result.name + `</div>
            <div>Treść pytania</div>
            <div>` + result.content + `</div>            
        <button onclick="editq(this)">Edytuj</button></div>`)

        } else if (result.type == "single") {
            let ans = '';
            let correct = "";
            for (let i = 0; i < result.option.length; i++) {
                if (result.option[i] == result.correct) {
                    correct = "   --Poprawna odpowiedź--";
                } else {
                    correct = "";
                }
                ans += `<div>Opdpowiedź ` + (i + 1) + `.</div>
             <div>` + result.option[i] + correct + `</div>`;

            }
            cont.html(`<div class="showq">
            <div>Etykieta pytania</div>
            <div>` + result.name + `</div>
            <div>Treść pytania</div>
            <div>` + result.content + `</div>            
            ` + ans + `<button onclick="editq(this)">Edytuj</button></div>`)

        } else if (result.type == "multi") {
            let ans = '';
            let correct = "";
            for (let i = 0; i < result.option.length; i++) {
                if (jQuery.inArray(result.option[i], result.correct) != -1) {
                    correct = "   --Poprawna odpowiedź--";
                } else {
                    correct = "";
                }
                ans += `<div>Opdpowiedź ` + (i + 1) + `.</div>
             <div>` + result.option[i] + correct + `</div>`;

            }
            cont.html(`<div class="showq">
            <div>Etykieta pytania</div>
            <div>` + result.name + `</div>
            <div>Treść pytania</div>
            <div>` + result.content + `</div>            
            ` + ans + `<button onclick="editq(this)">Edytuj</button></div>`)
        }
        $(".showq").attr("id", e.id);
    }

    // USUWANIE PYTAŃ I RODZIAŁÓW

    function block(){
        $("p.list-item").off("click");
        $("p.list-item").attr("draggable","false");
        $("p.list-item").off("dragstart",drag);
        $(".cont").off("dragover",allowDrop);

    }
    function unblock(){
        block();
        $("p.list-item").on("click",this,showq);
        $("p.list-item").attr("draggable","true");
        $("p.list-item").on("dragstart",drag);
        $(".cont").on("dragover",allowDrop);
        $("input").remove();
        rembool = false;
    }
    function rem(){
        if(rembool==false){
        rembool =true;
        block();
        $("p.list-item").append("<input type='checkbox'>");
        $("input").css("float","right");
        $("p.list-item").on("click",(e)=>{
           let input = e.target.lastChild ;
            if(input.checked == false){
                input.checked = true;
            }else{
                input.checked = false;
            }
            remarr();
        });
        $(".cont").append("<input onclick='remc(this)' type='checkbox'> ");

        }
    }
    
    
        function test(){
        if(rembool==false){
        rembool =true;
        block();
        $("p.list-item").append("<input type='checkbox'>");
        $("input").css("float","right");
        $("p.list-item").on("click",(e)=>{
           let input = e.target.lastChild ;
            if(input.checked == false){
                input.checked = true;
            }else{
                input.checked = false;
            }
            remarr();
        });
        $(".cont").append("<input onclick='ctest(this)' type='checkbox'> ");

        }
    }
        function ctest(e){
        let thisid = e.parentElement.id
        if(e.checked==true){
            $("#"+thisid).find("input").prop('checked', true);
        }else{
            $("#"+thisid).find("input").prop('checked', false);
        }
        testarr();
    }
    
    testarr()
    

    function remc(e){
        let thisid = e.parentElement.id
        if(e.checked==true){
            $("#"+thisid).find("input").prop('checked', true);
        }else{
            $("#"+thisid).find("input").prop('checked', false);
        }
        remarr();
    }
    unblock();
    
    function remarr(){
    remarrayq = [];
    remarrayc = [];
    $(".maincont").html("")
    $("input:checked").each(function(){
        if(this.parentElement.tagName=="P"){
        remarrayq.push(this.parentElement.id);
        }else{
        remarrayc.push(this.parentElement.id);
        }
    $(".maincont").append("<div>"+this.parentElement.innerText+"</div>")
     });
    $(".maincont").append("<button onclick='deletethem(remarrayq,remarrayc)'>Usuń!</button>")
    }
    
        function deletethem(arrq,arrc){
        for( let i = 0; i < arrc.length; i++){ 
            if ( arrc[i] === "unassigned") {
                arrc.splice(i, 1); 
            }
        }
        for( let i = 0; i < arrc.length; i++){
            socket.emit("treedeletechapter",socket.id,arrc[i],`<%= user.id %>`);
        }
            
               for( let i = 0; i < arrq.length; i++){
            socket.emit("treedeletequestion",socket.id,arrq[i],`<%= user.id %>`);
        }
            if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },3500)
            }
            
            
        }



    var scroll = function(step) {
        var scrollY = $(window).scrollTop();
        $(window).scrollTop(scrollY + step);
        if (!stop) {
            setTimeout(function() {
                scroll(step)
            }, 20);
        }
    }

    // DRAG & DROP
    var stop = true;
    $("p.list-item").on("drag", function(e) {

        stop = true;

        if (e.originalEvent.clientY < 150) {
            stop = false;
            scroll(-1)
        }

        if (e.originalEvent.clientY > ($(window).height() - 150)) {
            stop = false;
            scroll(1)
        }

    });

    $("p.list-item").on("dragend", function(e) {
        stop = true;
    });

    let srcid;

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        srcid = ev.target.id;
    }

    function drop(ev) {
        ev.preventDefault();

        if (ev.path[3].className.includes('cont') && ev.path[1].className.includes('icon')) {
            socket.emit("move", socket.id, srcid, ev.path[3].id, `<%= user.id %>`);
        } else if (ev.path[4].className.includes('cont') && ev.path[2].className.includes('icon')) {
            socket.emit("move", socket.id, srcid, ev.path[4].id, `<%= user.id %>`);
        } else if (ev.target.className == "dir-header") {
            socket.emit("move", socket.id, srcid, ev.target.parentElement.id, `<%= user.id %>`);

        } else if (ev.target.className.includes("cont")) {
            socket.emit("move", socket.id, srcid, ev.target.id, `<%= user.id %>`);
        } else if (ev.target.className.includes("list-item")) {
            socket.emit("move", socket.id, srcid, ev.target.parentElement.parentElement.parentElement.id, `<%= user.id %>`);
        }
    }
    
    
    
    

    
    function addchapter() {
        $("#err").html("");
        let errorcheck = false;
        let error = [];
        if ($('#chaptername').val() == "") {
            errorcheck = true;
            error.push("<div>Nazwa rozdziału jest pusta</div>");
        }
        if ($('#chaptercontent').val() == "") {
            errorcheck = true;
            error.push("<div>Opisz rozdziału jest pusty</div>");
        }
        if (errorcheck == false) {
            socket.emit("dodaj", socket.id, $('#chaptername').val(), "addchapter", $('#chaptercontent').val(), undefined, undefined, `<%= user.id %>`);
        } else {
            $("#err").html(error);
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },3500)
            }
    }

    function addsingle() {
        $("#err").html("");
        let errorcheck = false;
        let error = [];



        let arr = [];
        $(".a").each(function() {
            arr.push(this.value)
            if (this.value == "" && errorcheck == false) {
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
            }
        })
        if ($('#singlename').val() == "") {
            errorcheck = true;
            error.push("<div>Etykieta pytania jest pusta</div>");
        }
        if ($('#singlecontent').val() == "") {
            errorcheck = true;
            error.push("<div>Treść pytania jest pusta</div>");
        }

        let ansid = $("input[name='ans']:checked").attr('id');
        console.log($("#" + ansid + "ans").val(), error)
        if ($("#" + ansid + "ans").val() == undefined) {
            errorcheck = true;
            error.push("<div>Nie zaznaczono poprawnej odpowiedzi</div>");
        }

        if (errorcheck == false) {
            socket.emit("dodaj", socket.id, $('#singlename').val(), "single", $('#singlecontent').val(), arr, $("#" + ansid + "ans").val(), `<%= user.id %>`);
        } else {
            $("#err").html(error);
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },3500)
            }
    }

    function addopen() {
        $("#err").html("");
        let errorcheck = false;
        let error = [];
        if ($('#openname').val() == "") {
            errorcheck = true;
            error.push("<div>Etykieta pytania jest pusta</div>");
        }
        if ($('#opencontent').val() == "") {
            errorcheck = true;
            error.push("<div>Treść pytania jest pusta</div>");
        }
        if (errorcheck == false) {
            socket.emit("dodaj", socket.id, $('#openname').val(), "open", $('#opencontent').val(), undefined, undefined, `<%= user.id %>`);
        } else {
            $("#err").html(error);
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },3500)
            }
    }

    function addmulti() {
        $("#err").html("");
        let errorcheck = false;
        let error = [];
        let arr = [];
        let correct = [];
        $(".a").each(function() {
            arr.push(this.value);
            if (this.value == "" && errorcheck == false) {
                errocheck = true;
                error.push("<div>Conajmniej jedna z odpowiedzi jest pusta</div>");
            }
        })
        if ($('#multiname').val() == "") {
            errorcheck = true;
            error.push("<div>Etykieta pytania jest pusta</div>");
        }
        if ($('#multicontent').val() == "") {
            errorcheck = true;
            error.push("<div>Treść pytania jest pusta</div>");
        }

        $("input[name='ans']:checked").each(function() {
            correct.push($("#" + this.value + "ans").val())

        })
        if (correct == "") {
            errorcheck = true;
            error.push("<div>Nie zaznaczono poprawnej odpowiedzi</div>");
        }
        if (errorcheck == false) {
            socket.emit("dodaj", socket.id, $('#multiname').val(), "multi", $('#multicontent').val(), arr, correct, `<%= user.id %>`);
        } else {
            $("#err").html(error);
        }
                    if(refreshbool == false){
                refreshbool = true;
                setTimeout(function(){
                    refreshbool = false;
                    socket.emit("gettree",socket.id,`<%= user.id %>`);
                },3500)
            }

    }

    /////// SOCKET.IO /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //    socid, name, type, content, options, correct, userid

    const socket = io();
    socket.on('connect', () => {
        console.log(socket.id);
    })

    socket.on("newtree",(nchapters,nquestions)=>{
        chapters = nchapters;
        questions = nquestions;
        allquestions = nquestions;
    })
    
    
    socket.on("treedelete",(treeid)=>{
        $("#"+treeid).remove();
    })

    socket.on('cChapter', (cChapter) => {

        chapters.push(cChapter);
        $(`<div class='dir cont list-item' id="` +
            cChapter._id +
            `"ondrop="drop(event, this)" ondragover="allowDrop(event)">
    <div class='dir-header' db-id=` +
            cChapter._id +
            `>
      <span class='icon'><i class='fas fa-folder'></i></span> ` +
            cChapter.name +
            `
      <span class='icon is-pulled-right arrow'
        ><i class='fas fa-angle-right'></i
      ></span>
    </div>
    <div class='dir-items'><div class="dir-items-wrapper">
            </div></div></div>`).insertBefore('div#unassigned')

        setClickEventOnTreeItems();




    })

    socket.on('cQuestion', (question) => {
        questions.push(question);
        let div = $("#unassigned").find('.dir-items-wrapper');
        if (question.type == "open") {
            div.append(
                `<p class="list-item" id="` +
                question._id +
                `"title="` +
                question.content +
                `" draggable = 'true' ondragstart="drag(event)">
      <span class="icon"> <i class="fas fa-calendar-minus"></i> </span
      >` +
                question.name +
                `</p>`
            )
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '+=42,5');
            }
        } else if (question.type == "single") {
            div.append(
                `<p class="list-item" id="` +
                question._id +
                `"title="` +
                question.content +
                `" draggable = 'true' ondragstart="drag(event)">
      <span class="icon"> <i class="fas fa-calendar-check"></i> </span
      >` +
                question.name +
                `</p>`
            )
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '+=42,5');
            }
        } else if (question.type == "multi") {
            div.append(
                `<p class="list-item" id="` +
                question._id +
                `"title="` +
                question.content +
                `" draggable = 'true' ondragstart="drag(event)">
        <span class="icon"> <i class="fas fa-calendar-alt"></i> </span
        >` +
                question.name +
                `</p>`
            )
        }
        if ($("#unassigned").hasClass("opened-item")) {
            $("#unassigned").find('.dir-items').css('height', '+=42,5');
        }

    })

    socket.on('refreshTree', (src, target, sourcediv, newChapters, newQuestions) => {
        chapters = newChapters;
        questions = newQuestions;
        allquestions = newQuestions;
        if (sourcediv != undefined) {

            const srcindex = chapters.findIndex(x => x._id === sourcediv);
            const srcdir = chapters[srcindex].questions;
            const srccontent = generateTreeItems(srcdir, questions);
            $("#" + sourcediv).find('.dir-items-wrapper').html(srccontent);
            if ($("#" + sourcediv).hasClass("opened-item")) {
                $("#" + sourcediv).find('.dir-items').css('height', '-=42,5');
            }

        } else {
            const srcdir = [];
            newQuestions.forEach(question => {
                if (!question.chapter) {
                    srcdir.push(question._id)
                }
            });
            const srccontent = generateTreeItems(srcdir, questions);
            $("#unassigned").find('.dir-items-wrapper').html(srccontent);
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '-=42,5');
            }
        }

        if (target != 'unassigned') {
            const targetindex = chapters.findIndex(x => x._id === target);
            const targetdir = chapters[targetindex].questions;
            const targetcontent = generateTreeItems(targetdir, questions);
            $("#" + target).find('.dir-items-wrapper').html(targetcontent);
            if ($("#" + target).hasClass("opened-item")) {
                $("#" + target).find('.dir-items').css('height', '+=42,5');
            }
        } else {
            const targetdir = [];
            newQuestions.forEach(question => {
                if (!question.chapter) {
                    targetdir.push(question._id)
                }
            });
            const targetcontent = generateTreeItems(targetdir, questions);
            $("#unassigned").find('.dir-items-wrapper').html(targetcontent);
            if ($("#unassigned").hasClass("opened-item")) {
                $("#unassigned").find('.dir-items').css('height', '+=42,5');
            }



        }




     unblock();

    })

</script>

</html>
