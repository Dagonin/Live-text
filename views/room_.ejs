<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Document</title>
    <script defer src="https://use.fontawesome.com/releases/v5.3.1/js/all.js"></script>
    <link rel="stylesheet" href="/css/room.css" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,400&display=swap" rel="stylesheet">
    <link href="/css/fontawesome/css/all.css" rel="stylesheet">
    <link href="//cdn.quilljs.com/1.0.0/quill.snow.css" rel="stylesheet">
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons"
      rel="stylesheet">
    <link href="//cdn.quilljs.com/1.0.0/quill.bubble.css" rel="stylesheet">
</head>

<body>
<!--Timer-->
<div id="timer"></div>
<!--Numer pokoju -->
<% if(user){ %>
<div class="room">
<div class="room-title">Zarządzanie pokojem</div>
<div style="float:left;width:100%;box-sizing:border-box;margin-top:20px; ">
<div style="width:80%;float:right;height:auto;">
<span class="etykieta">Kod Klasy </span><br><br>
<div class="kodklasy">
<div id="pinpokoju" class="etykieta">
<div class="room-pin"><%= room.PIN %></div> </div></div>
<!-- Pokazanie pytania -->
<span class="etykieta">Pogląd pytań </span><br><br>
<div class="showq">Brak danych</div>
<% if(user){%>
<div id="PointsGraph"></div>
<% } %>
</div>
<button onclick="endtest()" class="close-test"><i class="fas fa-times icon_mg"></i> zakończ test</button>
<% if(user){%>
<div class="pytaniaocena">
<div class="etykieta">Pytania otwarte</div>
</div><br>
<div class="openqlist"></div>
<% } %>
<!--Lista guestów-->
<div style="width:18%;float:left;margin-right:2%;">
<div class="uczniowie-box">
<div class="etykieta"><i class="fas fa-user-friends icon_mg"></i></i> Uczniowie</div>
</div><br>
<div id="guestlist"></div>
<% if(room.OPEN==true){ %>
<button onclick="startgame()" class="startgame"><i class="fas fa-play icon_mg"></i> ROZPOCZNIJ</button></div>
<% }}else if(room.OPEN){ %>
<!--Lista guestów-->
<div style="min-width:330px;width:18%;margin:100px auto 0px auto">
<div class="uczniowie-box">
<div class="etykieta"><i class="fas fa-user-friends icon_mg"></i></i> Lista uczniów w pokoju</div>
</div>
<div id="guestlist"></div>


</div>
</div>

<% } %>
<!--Treść pytania-->
<div id="gamequestions">
<% if(!user && room.OPEN == false){ %>
<div class="room">
<div class="room-title">Wypełnianie testu <button onclick="recognition.start()">GŁOS</button></div>
<div style="padding:30px;box-sizing:border-box;background:#fff;margin-top:20px;    box-shadow: 0px 0px 5px #ccc;border-radius:3px;">
<div class="quest-number"></div>
<div id="question"></div>
<div id="answers"></div>
<% if(room.time){ %>
<button onclick="changequestion(-1)" class="nav-question">Poprzednie pytanie</button>
<% } %>
<button onclick="changequestion(1)" class="nav-question">Następne pytanie</button>
<% } %>
<!--Licznik pytań-->
<div id="licznik"></div>
</div>
</div>
</div>
<!--lista pytań otwartych-->
<% if(user){%>
<div id="popup"></div>
<% } %>



</body>
<script src='https://cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.js'></script>
<script src="https://code.jquery.com/jquery-3.4.1.js" integrity="sha256-WpOohJOqMqqyKL9FccASB9O0KwACQJpFTUBLTYOVvVU=" crossorigin="anonymous"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.js"></script>
<script src="//cdn.quilljs.com/1.3.6/quill.min.js"></script>
<script src="https://code.responsivevoice.org/responsivevoice.js?key=hnkla9Ul"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script>
    let room;
    let drake = dragula();
    let guestlist;
    let questions;
    let guest;
    let timerinverval;
    let checktimeinterval;
    let questionidlist = [];
    let shownquestioninfo;
    let openqarray;
    let gradetype;
    let correctmatchq;

        //Wykres z wynikami
    
    
    
    
    
        function PostGamePointsGraph(){
        let UserPoints = [];
        let MaxPoints = [];
        let NumberOfQuestions = questions.length;
        let NumberOfGuests = guestlist.length;
        let div = $("#PointsGraph");
        let xLabel = [];
        let QuestionValues = [];
        questions.forEach(q=>{
            MaxPoints.push(q.points*NumberOfGuests)
        })
        
        for(let i = 0;i<NumberOfQuestions;i++){
            UserPoints[i] = 0;
            guestlist.forEach(g=>{
            UserPoints[i] += parseFloat(g.points[i])   
            })
        }
        
        
        questions.forEach((q,i)=>{
            xLabel.push("Pytanie "+(i+1));
        })
        UserPoints.forEach((p,i)=>{
            QuestionValues.push(p/MaxPoints[i]*100)
        })
            
            
            Chart(QuestionValues,xLabel)
    }
    
    

    function Chart(qValues,qLabels){
  Highcharts.setOptions({
    colors: ['#3273dc'],
    chart: {
        style: {
            fontFamily: 'sans-serif',
            color: 'black'
        }
    }
});
  $('#PointsGraph').highcharts({
        chart: {
            type: 'column',
            backgroundColor: '#fff'
        },
        title: {
            text: 'Średnia wyników',
            style: {  
              color: '#333'
            }
        },
        xAxis: {
            tickWidth: 0,
            labels: {
              style: {
                  color: '#333',
                 }
              },
            categories: qLabels
        },
        yAxis: {
            ceiling:100
            ,
           gridLineWidth: .5,
		      gridLineDashStyle: 'dash',
		      gridLineColor: 'black',
           title: {
                text: '',
                style: {
                  color: '#333'
                 }
            },
            labels: {
                formatter: function() {
                        return this.value+"%";
                    },
              style: {
                  color: '#333',
                 }
              }
            },
        legend: {
            enabled: false,
        },
        credits: {
            enabled: false
        },
        plotOptions: {
		      column: {
			      borderRadius: 2,
             pointPadding: 0,
			      groupPadding: 0.1
            } 
		    },
        series: [{
            name: ['Średni wynik'],
            data: qValues
        }]
    });
};
    
    
    
    

    
    //Czytanie
    function readtext(n){
        let text = $(n.parentElement).find('p').text()
       responsiveVoice.speak(text, "Polish Female"); 
    }
    
    
    
    //Wykrywanie mowy
    
    var isChromium = window.chrome;
    var winNav = window.navigator;
    var vendorName = winNav.vendor;
    var isOpera = typeof window.opr !== "undefined";
    var isIEedge = winNav.userAgent.indexOf("Edge") > -1;
    var isIOSChrome = winNav.userAgent.match("CriOS");

    if (isIOSChrome) {
    // is Google Chrome on IOS
    } else if(
    isChromium !== null &&
    typeof isChromium !== "undefined" &&
    vendorName === "Google Inc." &&
    isOpera === false &&
    isIEedge === false
    ) {
    var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;
    var SpeechGrammarList = SpeechGrammarList || webkitSpeechGrammarList;
    var SpeechRecognitionEvent = SpeechRecognitionEvent || webkitSpeechRecognitionEvent;
    var recognition = new SpeechRecognition();
    var speechRecognitionList = new SpeechGrammarList();
    let readquestion = ['przeczytaj pytanie','przeczytaj pytania','czytaj pytanie',"czytaj pytania",'przyczyny pytania','przyczyny pytanie']
    let readquestiontype = ["typ pytania",'typ pytan','typ pytanie','typ','te pytanie','te pytania']
    let readpossibilities = ['przeczytaj możliwości',"przeczytaj możliwość","przeczytaj odpowiedzi","możliwe odpowiedzi","przeczytaj odpowiedź","możliwe odpowiedź",'czy te możliwość','czy te odpowiedź','czy te odpowiedzi']
    let readnextquestion = ['nastepne','nastepny','następne','następny']
    let readpreviousquestion = ['poprzednie',' poprzedni']
    let readanswerquestion  = ['zaznacz','odpowiedz','zapisz','odpowiedź','dopisz','zamień','odznacz']
    let readanswer1 = ['pierwszą',"pierwsza",'1','1:00','1.','jeden']
    let readanswer2 = ['drugą','druga','2','2:00','2.','dwa']
    let readanswer3 = ['trzecią','trzecia','3','3:00','3.','trzy']
    let readanswer4 = ['czwartą','czwarta','4','4:00','4.','cztery']
    let readmyanswer = ['moje odpowiedzi','moja odpowiedź','moja odpowiedzi','moje odpowiedź','moją odpowiedź','moją odpowiedzi','moja spowiedzi','mój odpowiedź','mój odpowiedzi','mój spowiedź']
    let readstop = ['stop']
    recognition.lang = 'pl-PL';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;
    recognition.onspeechend = function() {
        recognition.stop();
    }
    recognition.onresult = function(ev){
        let confidence = ev.results[0][0].confidence
        if(confidence>0.3){
            let com = ev.results[0][0].transcript.toLowerCase();
            console.log(com)
            let bool = false;
            readquestion.forEach((n)=>{
                if(com.includes(n)){
                    responsiveVoice.speak($('#question p').text(),"Polish Female")
                    bool = true;
                    throw "a";
                }
            })
            if(bool==false){
            readquestiontype.forEach(n=>{
                if(com.includes(n)){
                    let czyt;
                    if(questions[guest.index].type=="open"){
                        czyt='otwarte';
                    }
                    if(questions[guest.index].type=="single"){
                        czyt='Pojedyńczego wyboru';
                    }
                    if(questions[guest.index].type=="multi"){
                        czyt='Wielokrotnego wyboru';
                    }
                    if(questions[guest.index].type=="match"){
                        czyt='Dopasowywanie';
                    }
                    responsiveVoice.speak(czyt,"Polish Female")
                    bool = true;
                    throw "a";
                }
            })}
            
            
            if(bool==false){
                readmyanswer.forEach(n=>{
                    if(com.includes(n)){
                        if(questions[guest.index].type=="open"){
                            responsiveVoice.speak("Zapisałeś, "+$(".ql-editor").text(),"Polish Female")
                        }
                        if(questions[guest.index].type=="single"||questions[guest.index].type=="multi" ){
                            let idarr = [];
                            $(".toggle").each(function(x){
                                if(this.id==0){
                                    idarr.push('pierwszą')
                                }
                                if(this.id==1){
                                    idarr.push('drugą')
                                }                                
                                if(this.id==2){
                                    idarr.push('trzecią')
                                }
                                if(this.id==3){
                                    idarr.push('czwartą')
                                }                                                                
                                
                                
                                
                            })
                           responsiveVoice.speak("Zaznaczyłeś odpowiedź "+idarr,"Polish Female") 
                        }
                    }
                })
            }
            
            
            
            
            if(bool==false){
               readpossibilities.forEach(n=>{
                   if(com.includes(n)){
                       if(questions[guest.index].type!="open"){
                       $('#answers span').each(n=>{
                           let ans = $('#answers p')[n].innerText;
                           if(n==0){
                               responsiveVoice.speak("Odpowiedź pierwsza, "+ans,"Polish Female")
                           }  
                           if(n==1){
                               responsiveVoice.speak("Odpowiedź druga, "+ans,"Polish Female")
                           }
                           if(n==2){
                               responsiveVoice.speak("Odpowiedź trzecia, "+ans,"Polish Female")
                           }
                           if(n==3){
                               responsiveVoice.speak("Odpowiedź czwarta, "+ans,"Polish Female")
                           }
                       })
                       bool = true;
                       throw "a";
                       }else{
                           responsiveVoice.speak("Zapisałeś: "+$('.ql-editor').text(),"Polish Female")
                       }
                   }               
               })
               }
            
            if(bool==false){
                readnextquestion.forEach(n=>{
                    if(com.includes(n)){
                        changequestion(1);
                        responsiveVoice.speak("Następne pytanie","Polish Female")
                        bool = true;
                        throw "a";
                    }
                })
            }
                
                if(bool==false){
                readpreviousquestion.forEach(n=>{
                    if(com.includes(n)){
                        <% if(room.time){ %>
                        changequestion(-1);
                        responsiveVoice.speak("Poprzednie pytanie","Polish Female")
                        bool = true;
                        throw "a";
                    <% } else{ %>
                        responsiveVoice.speak("W tym teście nie można cofać pytać","Polish Female")
                        bool = true;
                        throw "a";
                    <% } %>
                    }
                })
            }
            

            if(bool==false){
                readanswerquestion.forEach(n=>{
                    if(com.includes(n)){
                        if(n=='zapisz'&&questions[guest.index].type=="open"){
                            let indx = com.indexOf("zapisz")+7;
                            let string = ev.results[0][0].transcript.slice(indx);
                            string = string.charAt(0).toUpperCase() + string.slice(1);
                            $('.ql-editor').html("<p>"+string+". </p>")
                            responsiveVoice.speak("Zapisano: "+string,"Polish Female")     
                            bool = true;
                            throw "a";
                            
                        }
                        if(questions[guest.index].type=="open"&&n=='zamień'){
                            let str = $('.ql-editor').text();
                            var secondLastIndex = str.lastIndexOf('. ', str.lastIndexOf('. ')-1)
                            if(secondLastIndex==-1){
                            let indx = com.indexOf("zamień")+7;
                            let string = ev.results[0][0].transcript.slice(indx);
                            string = string.charAt(0).toUpperCase() + string.slice(1);
                            $('.ql-editor').html("<p>"+string+". </p>")
                            responsiveVoice.speak("Zapisano: "+string,"Polish Female")     
                            bool = true;
                            throw "a"; 
                            }else{
                            let str = $('.ql-editor').text();
                            let indx = com.indexOf("zamień")+7;
                            let string = ev.results[0][0].transcript.slice(indx);
                            string = string.charAt(0).toUpperCase() + string.slice(1);
                            $('.ql-editor').text(str.slice(0,secondLastIndex)+'. '+string+'. ');
                            responsiveVoice.speak("Zapisano: "+string,"Polish Female")     
                            bool = true;
                            throw "a"; 
                            }

                        }
                        if(questions[guest.index].type=="open"&&n=="dopisz"){
                            let indx = com.indexOf("dopisz")+7;
                            let string = ev.results[0][0].transcript.slice(indx);
                            string = string.charAt(0).toUpperCase() + string.slice(1);
                            $('.ql-editor p').append(string+'. ');
                            responsiveVoice.speak("Zapisano: "+string,"Polish Female")     
                            bool = true;
                            throw "a"; 
                        }
                        
                        if(questions[guest.index].type!="open"&&(n=='zaznacz'||n=='odpowiedz'||n=='odpowiedź'||n=="odznacz")){
                            readanswer1.forEach(x=>{
                                if(com.includes(x)){
                                    $('#0').click()
                                    if(questions[guest.index].type=='multi'&&$("#0").hasClass('toggle')==false){
                                    responsiveVoice.speak("Odznaczono odpowiedź pierwszą","Polish Female")  
                                    }else{
                                    responsiveVoice.speak("Zaznaczono odpowiedź pierwszą","Polish Female")  
                                    }
                                    bool = true;
                                    throw "a"; 
                                }
                            })
                            readanswer2.forEach(x=>{
                                if(com.includes(x)){
                                    $('#1').click()
                                    if(questions[guest.index].type=='multi'&&$("#1").hasClass('toggle')==false){
                                    responsiveVoice.speak("Odznaczono odpowiedź drugą","Polish Female")  
                                    }else{
                                    responsiveVoice.speak("Zaznaczono odpowiedź drugą","Polish Female")  
                                    }
                                    bool = true;
                                    throw "a"; 
                                }
                            })                            
                            readanswer3.forEach(x=>{
                                if(com.includes(x)){
                                    $('#2').click()
                                    if(questions[guest.index].type=='multi'&&$("#2").hasClass('toggle')==false){
                                    responsiveVoice.speak("Odznaczono odpowiedź trzecią","Polish Female")  
                                    }else{
                                    responsiveVoice.speak("Zaznaczono odpowiedź trzecią","Polish Female")  
                                    }
                                    bool = true;
                                    throw "a"; 
                                }
                            })                            
                            readanswer4.forEach(x=>{
                                if(com.includes(x)){
                                    $('#3').click()
                                    if(questions[guest.index].type=='multi'&&$("#3").hasClass('toggle')==false){
                                    responsiveVoice.speak("Odznaczono odpowiedź czwartą","Polish Female")  
                                    }else{
                                    responsiveVoice.speak("Zaznaczono odpowiedź czwartą","Polish Female")  
                                    }
                                    bool = true;
                                    throw "a"; 
                                }
                            })                              
                        }
                    }
                    
                })
            }
            
            
            
            
            
            
            
            
            if(bool==false){
                readstop.forEach(n=>{
                    if(com.includes(n)){
                        responsiveVoice.cancel();
                        bool = true;
                        throw "a";
                    }
                })
            }
            
            
            
        }else{
            responsiveVoice.speak('Powtórz', "Polish Female"); 
        }
        

    }
    
    recognition.onend = function(ev){
        recognition.start()
    }
    } else { 
    }
    
    
    
    
    
    
    
    
    
    
    <% if(!user){ %>
    <% if( fguest.roomquestions.answer!=""){ %>
    let answers = <%-JSON.stringify(fguest.roomquestions.answer) %>;
    console.log(answers)
    <% }else{ %>
    let answers = [];
    <% } %>
    <% }%>
    const socket = io();
            socket.on('connect', () => {
                console.log(socket.id)
                <% if(!user){ %>
                socket.emit('addSocketIDToGuest','<%= fguest._id %>',socket.id);
                <% }if(!user && room.OPEN == false){ %>
                checktimeinterval = setInterval(checktime,1000)
                timer(<%= fguest.time %>-timeremaining())
                <% }%>
                socket.emit('joinroom',"<%= room.PIN %>",<%= room.OPEN %>);

        });
    
    
        window.onbeforeunload = function(event)
    {
        changequestion(0);
    };
    
    
    //SOCKETIO
    
    
    
    //Lista guestów
    socket.on('reloadlist',(fRoom,fGuests,fQuestions)=>{
        if(fQuestions){
            $(".quest-number").text("Pytanie 1 z "+fQuestions.length);}
        <% if(room.OPEN==true){ %>
        room = fRoom;
        guestlist = fGuests;
        questions = fQuestions;
        questionsidlist = [];
        if(questions){
        questions.forEach(q =>{
            questionidlist.push(q._id);
        })
        }
        $("#guestlist").html("")
        $.each(guestlist,function(){
            $("#guestlist").append(`<div class="guestobject">`+this.username+ <% if(user){ %>   `<button onclick="deleteguest(this)" db-id="`+this._id+`"><i class="fas fa-times"></i></button> ` +  <% } %> `</div>`)
            
        })
        <% }else{ %>
        room = fRoom;
        guestlist = fGuests;
        questions = fQuestions;
        questionsidlist = [];
        console.log(questionidlist)
        questions.forEach(q =>{
        questionidlist.push(q._id);

            
        })
        <% if(!user){ %>
        
         <% if(room.end=='halftrue'|| (fguest.end==true&&room.end=='false')){ %>
                clearInterval(checktimeinterval);
                clearInterval(timerinverval)
        $("body").html('<div class="test-successful"><div class="successful-text"><h1><span class="material-icons">done</span><br> Test zakończony</h2><h3>Poczekaj aż nauczyciel oceni odpowiedzi</h3></div></div>')
        <%}else if(room.end=="true"){ %>
                        let qarr = [];
        $.grep(questions,function(n){return n.type =="match";}).forEach(q=>{
                    qarr.push(q.option.length)
        })
        socket.emit('getmatch',socket.id,qarr,"<%= room.PIN %>")
        endgame()
        
        <%}else {%>
        console.log(answers);
        showquestion()
        setInterval(changequestion,2000,0)
        questions.forEach((q,i)=>{
            $("#licznik").append(`<input num='`+i+`' name='licz' type="radio" class="radio-c"><span class="checkmark">`+(i+1)+`</span>`)
            
        })
        $('input[name="licz"]')[guest.index].checked = true;
        $('input[name="licz"]').click(function(){
            <% if(room.time){ %>
            let num = parseInt(this.getAttribute("num"))
            changequestion(num-guest.index)
            <% }else{ %>
            this.checked = false;
            $('input[name="licz"]')[guest.index].checked = true;
            <% } %>
            
           
            
        })
        <% }}else{ %>
                   
                    $.each(guestlist,function(){
                    $("#guestlist").append(`<div class='guestobject' id='`+this._id+`'>`+this.username+ `<span class='counter'></span><div class='showquestions'></div> </div>`)
                        
                    $("#"+this._id).click(function(){
                        let qdiv = $(this).find(".showquestions");
                        let qid = this.id;
//                        if(qdiv.attr("alt")=="open"){
//                           qdiv.html("");
//                            qdiv.attr( "alt", "notopen" )
//                           }else{
                        qdiv.html("");
                        qdiv.attr( "alt", "open" )
                        let gobj = $.grep(guestlist,function(n){return n._id == qid;})
                        gobj[0].roomquestions.question.forEach(q=>{
                            let thisq = $.grep(questions,function(n){return n._id == q;})[0];
                            qdiv.append(`<div class='qlist' db-id="`+thisq._id+`">`+ thisq.name+`</div>`)
                            $(`div[db-id="`+thisq._id+`"]`).click(function(){
                                shownquestioninfo = [thisq,this.parentElement.parentElement.id]
                                showq(thisq,this.parentElement.parentElement.id)
                            })
                        })
//                           }
                })
            
        })
                let qarr = [];
        $.grep(questions,function(n){return n.type =="match";}).forEach(q=>{
                    qarr.push(q.option.length)
        })
        socket.emit('getmatch',socket.id,qarr,"<%= room.PIN %>")
        <% if(room.end=="true"){ %>
                    PostGamePointsGraph()    
                  <%  } %>
        <% if(!room.time||room.end=="halftrue"){ %>
        getqinfo()
        openquestionslist(openqarray)
        <% }}} %>
        

    })
    // Wyświetlenie pytania u nauczyciela
    function showq(qobject,gid,checkifguest){
        let g;
        if(checkifguest == 'g'){
            g = guest;
        }else{
            g = $.grep(guestlist,function(n){return n._id==gid})[0];
        }
        

        let qindex = $.inArray(qobject._id,g.roomquestions.question)
//        console.log(g.roomquestions.answer[qindex])
        if(g.roomquestions.answer[qindex]!=null){
        if(qobject.type=="open"){
            

            $(".showq").html(`<div class="showqcontent">`+qobject.content+`</div>`+(g.roomquestions.answer[qindex] ? `<div class="showqanswer">`+g.roomquestions.answer[qindex]+`</div>` : ""))
            
        }else if(qobject.type=="single"||qobject.type=="multi"){
            
                $(".showq").html(`<div class="showqcontent">`+qobject.content+`</div><div class="showqanswer"></div>`)
                qobject.option.forEach((option,i)=>{
                    $(".showqanswer").append("<div class='"+qobject.type+"' id="+i+">"+option+"</div>");
                    if(g.roomquestions.answer[qindex].length!=0){
                       if($.inArray(i.toString(),g.roomquestions.answer[qindex])!=-1){
                           $("#"+i).addClass("togglegreen-a")
                       }
                        
                    }
                    console.log(qobject,option,g)
                    if($.inArray(option,qobject.correct)!=-1){
                        $("#"+i+" p").append(" -Poprawna odpowiedź")
                    }
                })
            
        } else if(qobject.type="match"){
            let wrongindex = 0;
            let matchans = scorematch("check");
            let ansobj =  $.grep(scorematch("check"),function(n){return n.id == gid;})
            let ansindex = $.grep(ansobj[0].ans,function(n){return n.index == qindex;})
            console.log(wrongindex,matchans,ansobj,ansindex)
            $(".showq").html(`<div class="qoption"></div><div class="qcorrect"></div>`)
            qobject.option.forEach((opt,i)=>{
                let num = i+1;
                $(".qoption").append(`<div class='matchopt'>`+num+'.'+qobject.option[i]+`</div>`)
            })
            if(qobject.fake){
            if(qobject.fake.typ=="fakeans"){
                $(".qoption").append(`<div class='matchopt'>`+(qobject.option.length+1)+'.'+qobject.fake.content+`</div>`)
            }}
            qobject.correct.forEach((cor,i)=>{
                let indx = g.roomquestions.answer[qindex].o[i]-1;
                let checkif = $.inArray(i,ansindex[0].corr);
                $('.qcorrect').append(`<div class="matchcor">`+qobject.correct[i]+(g.roomquestions.answer[qindex].o[i] !=0 && g.roomquestions.answer[qindex].o[i] !=null ? `<h1>`+qobject.option[indx]+`</h1>`: "")+(checkif==-1 ? `<i class="fas fa-times"></i><div>`+qobject.option[ansindex[0].c[wrongindex]]+`</div>`  : '<span class="material-icons">done</span><br>') +`</div>`)
                if(checkif==-1){
                    wrongindex++;
                }
            })
           let fake = $.inArray("0",g.roomquestions.answer[qindex].o);
            if(fake!=-1){
              $($('.matchcor')[fake]).find('i').remove();
              $($('.matchcor')[fake]).append(`<h1>`+(qobject.fake.content)+`</h1><i class="fas fa-times"></i>`)
            }
            if(qobject.fake){
            if(qobject.fake.typ=="fakematch"){
                console.log(g.roomquestions.answer[qindex].o[(qobject.option.length)])
                $(".qcorrect").append(`<div class='matchcor'>`+qobject.fake.content+(g.roomquestions.answer[qindex].o[(qobject.option.length)] !=0 && g.roomquestions.answer[qindex].o[(qobject.option.length)] !=null ?`<h1>`+qobject.option[g.roomquestions.answer[qindex].o[(qobject.option.length)]-1]+`</h1><i class="fas fa-times"></i>`:'<span class="material-icons">done</span><br>')+`</div>`)
            }}
            
        }}else{
            $(".showq").text("Uczeń jeszcze nie odpowiedział")
        }
    }

    socket.on('Nguest',(g)=>{
        guest = g;
        if(guest){
        if(guest.end==true){
                clearInterval(checktimeinterval);
                clearInterval(timerinverval)
                $("body").html('<div class="test-successful"><div class="successful-text"><h1><span class="material-icons">done</span><br> Test zakończony</h2><h3>Poczekaj aż nauczyciel oceni odpowiedzi</h3></div></div>')
        }}
        if(guest.end==false){
//        $("input[name='licz']")[g.index]
        if($('input[name="licz"]').length!=0){
            $('input[name="licz"]')[g.index].checked = true;
        }
        }
    })
    
    // Ocena pytań i koniec testu
    
    function rankpoints(){
        let arr = [];
        guestlist.forEach(g=>{
            let obj = {};
            let gpoints = 0;
            g.points.forEach(p=>{
            if(p==null){
               p=0;
               }
            gpoints += parseInt(p);
                
            })
            obj.points = gpoints;
            obj.gid=g._id;
            arr.push(obj);
        })
        arr.sort(function(a1,b1){
            let a = a1.points;
            let b = b1.points;
            return b-a;
        })
        return arr;
    }
    
    

    
    
    function endgame(){
        <%if(!user){ %>
        let qpoints = room.maxpoints;
        let g = $.grep(room.rankings,function(n){return n.gid ==`<%= fguest._id %>`;})
        let index = $.inArray(g[0],room.rankings) +1
        console.log(g,index)
                        let qarr = [];
                $.grep(questions,function(n){return n.type =="match";}).forEach(q=>{
                    qarr.push(q.option.length)
                })
                
                bool=true;
                socket.emit('getmatch',socket.id,qarr,"<%= room.PIN %>")
        
        guestlist[0] = guest;
            
        $('body').html(`<div class='score'><div class='diagram'><div class='single-chart'>
    <svg viewBox='0 0 36 36' class='circular-chart orange'>
      <path class='circle-bg'
        d='M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831'
      />
      <path class='circle'
        stroke-dasharray='`+parseInt(g[0].points/qpoints*100)+`, 100'
        d='M18 2.0845
          a 15.9155 15.9155 0 0 1 0 31.831
          a 15.9155 15.9155 0 0 1 0 -31.831'
      />
      <text x='18' y='20.35' class='percentage'>`+parseInt(g[0].points/qpoints*100)+`%</text>
    </svg>
  </div></div><div class='score-text'><div class='congrats'>Zdobyłeś `+g[0].points+` na `+qpoints+` punktów.</div><div class='rank'>Jesteś na `+index+`. miejscu</div><br><div class="sendscore"><i class="fas fa-envelope icon_mail"></i> Wyślij potwierdzenie na mail</div></div></div><div class="answers-full"><div class='questions-a'><div class="qobject"></div></div><div class='questions-b'><div class='showq'><span style='margin-top:20px;display:inline-block'>Wybierz pytanie, żeby zobaczyć poprawne odpowiedzi</span></div></div></div>`);
        questions.forEach((q,n)=>{
            $('.qobject').append(`<div db-id='`+q._id+`'>`+q.name+`</div>`)
            
            $(`div[db-id="`+q._id+`"]`).click(function(){
                showq(q,`<%= fguest._id %>`,'g')
            })
            
        })
        
     <%   } %>
    }
    
    
    function endtest(){
 
        <% if(user){ %> 
        let bool = false;
        <%  if(!room.time){ %>
        
        if(openqarray.length!=0){
            bool=true;
            return false;
        }
         <% } %>


               getqinfo()
        openquestionslist(openqarray)
        
            if(!correctmatchq){
                let qarr = [];
                $.grep(questions,function(n){return n.type =="match";}).forEach(q=>{
                    qarr.push(q.option.length)
                })
                
                bool=true;
                console.log(guestlist,'aaaaaaaaa')
                socket.emit('getmatch',socket.id,qarr,"<%= room.PIN %>")
            }else{
                                                   
            scorematch("end")
                
                }
        
        
        
        
        
                
        if(gradetype!='bin'&&gradetype!='nor' && openqarray.length==0){
                $("#popup").html(`<div class='modal'><div class='popup-box'><span><center>Wybierz typ oceniania testu</center></span><br><button id='bin'>Binarnie</button><button id='nor'>Normalnie</button></div></div>`)
            $('#bin').click(function(){
                gradetype="bin";
                endtest()
            })            
            $('#nor').click(function(){
                gradetype="nor";
                endtest()
            })
            bool=true;
            return false;
        }
        
        
        
        if(bool==true){
            return false;
        }
        
        
        
        
        
        

 
        
        if(openqarray.length!=0){
            
            socket.emit('endtest',"<%= room.id %>","halftrue",'u')
        }else if(gradetype=='bin'||gradetype=='nor'){
                $('#popup').hide();
            let qpoints = 0;
            questions.forEach(n=>{
                qpoints += n.points;
                
            })
             let rank = rankpoints();
            socket.emit('endtest',"<%= room.id %>","true",'u',rank,qpoints)            
            }

        
        <% } %>
    }
    
            socket.on('endgame',(nroom)=>{
            room=nroom;
            <% if(!user){ %>
                clearInterval(checktimeinterval);
                clearInterval(timerinverval)
                if(room.end=="halftrue"){
                $("body").html('<div class="test-successful"><div class="successful-text"><h1><span class="material-icons">done</span><br> Test zakończony</h2><h3>Poczekaj aż nauczyciel oceni odpowiedzi</h3></div></div>')
                }else{
                    endgame()
                }
            <% }else{%>
                getqinfo()
                openquestionslist(openqarray)
                if(room.end=="true"){
                PostGamePointsGraph()
                }
            <%} %>
        })
                    
    
        socket.on('matchorder',(arr)=>{

            correctmatchq=arr;
        })
        
    
    
//    //Wyświetlenie listy pytań otwartych do oceny
    <% if(user){%>
    function getqinfo(){
        openqarray = [];
        let qarr = [];
        questions.forEach(q=>{
            if(q.type=="open"){
                qarr.push(q)
            }
        })
        
        qarr.forEach(q=>{
           guestlist.forEach(g=>{
               if(g.roomquestions.question){
                   let qid = $.inArray(q._id,g.roomquestions.question);
                   
                   if(qid!=-1&&qid<g.index&&!g.points[qid]){
                       
                       
                       let obj = {
                           content: q.content,
                           _id: g._id,
                           qid: qid,
                           name: q.name,
                           ans: g.roomquestions.answer[qid],
                           pkt: q.points
                       }
                       openqarray.push(obj)            
                   }
               }
           })
        })
    }
    
    function openquestionslist(){
        $('.openqlist').html('');
        openqarray.forEach((q,i)=>{
            $('.openqlist').append(`<div index='`+i+`' db-id='`+q._id+`' class="qlist2">`+q.name+`</div>`);
            $(`div[index='`+i+`']`).click(function(){
            $(".showq").html(`<div class="showqcontent">`+q.content+`</div><div class="showqanswer">`+q.ans+`</div><label for="pkt">Podaj ilość punktów za pytanie (0-`+q.pkt+`) </label><br><input name='pkt' class='insertpkt' type="number"><button class='rateq'>Oceń</button>`)
            $('.rateq').click(function(){
                let pkt = $("input[name='pkt']").val()
                if(pkt<0){
                    pkt = 0;
                    console.log(pkt)
                }else if(pkt>q.pkt){
                    pkt = q.pkt;
                    console.log(pkt)
                }
                if(pkt.length==0&&pkt!=0){
                    return false;
                }
                let g = $.grep(guestlist,function(n){return n._id ==q._id;})[0]
                g.points[q.qid] = pkt;
                
                socket.emit('rateopenq',q._id,g.points,q.qid)
                
                
            })
        })
        })

 }
    <%}%>
    
    //Wyrzucenie guesta z pokoju
    <% if(user){ %> 
    function deleteguest(e){
        socket.emit('deleteguest',$(e).attr('db-id'),"<%= room.PIN %>");
    }

    <% } %>
    socket.on('leaveroom',(e)=>{
        socket.emit('leaveroom1',"<%= room.PIN %>");
        location.reload();
        
    })
    
    
    //Rozpoczęcie gry
    <% if(room.OPEN==true){ %>
    function startgame(){
        <% room.OPEN=false %>
        socket.emit('startgame',"<%= room.PIN %>","<%= room.id %>")
            
    }
    <% } %>
                    
  // Ładowanie wszystkiego                  
    socket.on('lastload',(nRoom,fQuestions)=>{
            room = nRoom;
            if(fQuestions){
            questions = fQuestions;
            }
            <% if(!user){ %>
            <% if(room.time){%>
            $("#gamequestions").html(`<div id="question"></div><div id="answers"></div>
    <button onclick="changequestion(-1)">Poprzednie pytanie</button>
    <button onclick="changequestion(1)">Następne pytanie</button>`);
            $("#guestlist").remove();
            socket.emit('addtimeguest',"<%= fguest.id %>",'<%= room.time %>');
            changequestion(0);
            checktimeinterval = setInterval(checktime,1000)
            timer((<%= room.time %>*60))
            <% }else{%>
            $("#gamequestions").html(`<div id="question"></div>
    <button onclick="changequestion(1)">Następne pytanie</button>`);
            $("#guestlist").remove();
            let type = questions[0].type;
            let starttime;
            if(type=="open"){
                starttime = <%= room.opentime %>+"";
            }else if(type=="multi"||type=="single"){
                starttime = <%= room.closedtime %>+"";
            }
            changequestion(0);
            checktimeinterval = setInterval(checktime,1000)
            timer(starttime);
            <% }%>

            <% } %>
            location.reload()
        })    
        
        
        // Ocena match
        
        function scorematch(where){
            let goodmatcharray=[];
                guestlist.forEach((g,idx)=>{
                    let gobj = {
                        id: g._id,
                        ans: []
                    }
                    let qindexmatch = [];
                    let qindexrest = [];
                    $.grep(questions,function(n){return n.type =="match";}).forEach(q=>{
                       qindexmatch.push($.inArray(q._id,g.roomquestions.question))
                    })
                    $.grep(questions,function(n){return n.type =="single"|| n.type=="multi";}).forEach(q=>{
                       qindexrest.push($.inArray(q._id,g.roomquestions.question))
                    })
                    
                    qindexmatch.forEach((qidx,qi)=>{
                        let qobj = {
                            index: qidx,
                            corr: [],
                            wrong: [],
                            c: [],

                        }
                        let points = 0;
                        if(g.roomquestions.answer[qidx]){
                       g.roomquestions.answer[qidx].a.forEach((num,i)=>{
                        let corr = correctmatchq[qi].corr[num-1];
                        let opt = correctmatchq[qi].opt[g.roomquestions.answer[qidx].o[i]-1];                      
                           if(corr==opt&&opt!=undefined&&corr!=undefined){
                               qobj.corr.push(num-1)
                               points+=1;
                               
                           }else{
                               qobj.c.push(correctmatchq[qi].opt.indexOf(corr))
                               qobj.wrong.push(num-1)
                               
                               
                           }
                       })}
                        gobj.ans.push(qobj)
                        if(gradetype=="nor"){
                            g.points[qidx] = (points/questions[qidx].option.length)*questions[qidx].points
                        }else if(gradetype=="bin"){
                            if(points/questions[qidx].option.length==1){
                                g.points[qidx] = questions[qidx].points;
                            }else{
                                g.points[qidx] = 0;
                            }
                        }
                         
                    })
                    goodmatcharray.push(gobj)
                    
                    <% if(user){ %>
                    qindexrest.forEach((qidx,qi)=>{
                        let points = 0;
                        if(g.roomquestions.answer[qidx]){
                        g.roomquestions.answer[qidx].forEach(ans=>{
                        let index = $.inArray(questions[qidx].option[ans],questions[qidx].correct)
                        if(index == -1){
                            points--;
                        }else{
                            points++;
                        }
                            
                        })}
                        if(points<0){
                            points = 0;
                        }
                        
                        if(gradetype=="nor"){
                        g.points[qidx] = (points/questions[qidx].correct.length) * questions[qidx].points
                        }else if(gradetype=="bin"){
                            if(points/questions[qidx].correct.length==1){
                                g.points[qidx] = questions[qidx].points;
                            }else{
                                g.points[qidx] = 0;
                            }
                        }
                    })
                       if(where=="end"){
                   socket.emit('rateopenq',g._id,g.points)
                    }
                    <% }%>
                })
            if(where=="check"){
                return goodmatcharray;
            }
        }
        

        
        
    //Zmiana pytania
        <% if(!user){ %>

        
        // Zmiana indexu pytania
        function changequestion(num){
    //            Odpowiedź
            let er = false;
            let ans
            if(questions[guest.index]){
            if(questions[guest.index].type=="open"){
                if(window.quill){
                    ans = window.quill.container.firstChild.innerHTML
                    }
            }else if(questions[guest.index].type=="single"||questions[guest.index].type=="multi"){
                 ans = [];
                $(".toggle").each(function(){
                    ans.push(this.id)
                })
            }else if(questions[guest.index].type=="match"){
            ans = {
                o: [],
                a: []
            };         
                $( ".a").each(function( index ) {
                    if($(this).find('.o').length==1){
                        ans.o[index]=$(this).find('.o').attr('num');
                        ans.a.push($(this).attr('num'));
                    }else{
                        ans.a.push($(this).attr('num'));
                    }
                    
}               );
            }
            }
            if(ans){
                answers[guest.index] = ans;
            }
            <% if(!room.time){%>
                if(num<0){
                    num = num*-1;
                }
            <% }%>
            guest.index += num;
            if(guest.index<0){
                guest.index = 0;
                er=true;
            }
            if(guest.index>=questions.length){
                <% if(room.time){ %>
                guest.index = questions.length-num;
                er = true;
                return false;
                <%}else{ %>
                // KONIEC Testu
                    clearInterval(checktimeinterval);
                    clearInterval(timerinverval)
                socket.emit('endgtest',"<%= fguest.id %>","halftrue",'asd')     
                    $("#gamequestions").html('')
                er = true;
                    return false;
                <% } %>
            }
            
            if(num!=0){
                showquestion()
            }
            

//            Timer
            <% if(!room.time){ %>
            if(num!=0){
               if(questions[guest.index].type=='open'){
                   timer(<%= room.opentime %>)
               }else{
                   timer(<%= room.closedtime %>)
               }}
            <% } %>
            

            
            
    // Emit
            if(er==false && room.end=="false"){
            socket.emit("changeindex","<%= fguest.id %>",num,questions[guest.index].type,'<%= room.opentime %>','<%= room.closedtime %>','<%= room.time %>',questionidlist,answers,"<%= room.PIN %>")}
            
        }
        <% } %>
    //Timer
        function timer(time){
                function changetime(){
                let min = Math.floor(time/60);
                let sec = time%60;
                $("#timer").text(min+":"+sec)
                    
                if(time<=0){
                    timeout();
                    clearInterval(timerinverval)
                }  
                    time--;
                }
                
                if(timerinverval){
                clearInterval(timerinverval);
                timerinverval=undefined;
                }
                
                timerinverval = setInterval(changetime,1000,time);
            }
            
        function checktime(){
            if(timeremaining() >guest.time){
                timeout();
            }
        }    
            
        function timeremaining(){
            let currentdate = new Date();
            return currentdate.getHours()*3600+currentdate.getMinutes()*60+currentdate.getSeconds();
        }
            
        function timeout(){
            <% if(!user){ %>
            <% if(room.time && room.end=="false"){ %>
            clearInterval(timerinverval)
            socket.emit('endgtest',"<%= fguest.id %>","halftrue",'dds')
           <%}else{ %>
                        console.log(<%= room.end %>)
            clearInterval(timerinverval);
            changequestion(1);
            
            <% }} %>
        }

            // Zaznaczanie dobrej odpowiedzi
            function check(e,type){    
                if(type=="single"&& $(".toggle").length==1){
                    $(".toggle").toggleClass("toggle");
                }
                e.classList.toggle("toggle")
            }
            
            
            // Obiekt guest
            
            socket.on('nguestlist',(ng,d)=>{
                console.log(ng,d)
                <% if(user){ %>
                guestlist[(guestlist.findIndex(x => x._id === ng._id))]= ng;
                guestlist.forEach((g,i)=>{
                let anscount = g.index;
                let qcount = g.roomquestions.question.length;
                $("#"+g._id+" span").html("<br>"+(anscount+1)+'/'+qcount);
                })
                if(shownquestioninfo && room.end=="false"){
                showq(shownquestioninfo[0],shownquestioninfo[1])
                }
                if(room.end=="halftrue"&&room.time){
                                    getqinfo()
                openquestionslist(openqarray)
                }
                <% if(!room.time){ %>
                getqinfo()
                openquestionslist(openqarray)
                <% }} %>
            })
            
            
            
                        //WYŚWITLANIE PYTANIA                         WĄŻŃĘ////////////////////////////////////////////
            function showquestion(){
            $("#question").html(questions[guest.index].content+`<button class="volume" onclick="readtext(this)"><i class="fas fa-volume-up volume"></i></button>`);
            if(questions[guest.index].type=="single"||questions[guest.index].type=="multi"){
                $("#answers").html("");
                let optionindex=0;
                questions[guest.index].option.forEach(option=>{
                    $("#answers").append("<span class='"+questions[guest.index].type+"' onclick=check(this,'"+questions[guest.index].type+"') id="+optionindex+">A</span>"+option+"</div><br>");
                    optionindex++;
                })
                if(answers[guest.index]){
                    answers[guest.index].forEach(qid=>{
                        $("#"+qid).addClass("toggle");
                    })
                }
            }else if(questions[guest.index].type=="open"){
                
                if(answers[guest.index]){
                    $("#answers").html(`<div id='quillopen'>`+answers[guest.index]+`</div>`);
                }else{
                    $("#answers").html(`<div id='quillopen'></div>`);
                }
                quil("quillopen");
            }else if(questions[guest.index].type=='match'){
                if(answers[guest.index]){
                    $('#answers').html(`<div id='matchq'></div><div id='matchans'></div>`);
                questions[guest.index].correct.forEach((correct,i)=>{
                    let index = i+1;
                    let ind = $.inArray(index.toString(), answers[guest.index].a);
                    if(ind!= -1&&answers[guest.index].o[ind]){
                        if(answers[guest.index].o[ind]==0){
                        $("#matchans").append(`<div class='a' num="`+index+`">`+correct+`<div class='matchdrop'>`+`<div class='o' num="0">`+questions[guest.index].fake.content+`</div>`+`</div></div>`)
                        }else{
                        $("#matchans").append(`<div class='a' num="`+index+`">`+correct+`<div class='matchdrop'>`+`<div class='o' num="`+answers[guest.index].o[ind]+`">`+questions[guest.index].option[answers[guest.index].o[ind]-1]+`</div>`+`</div></div>`)
                        }
                    }else{
                        
                       $("#matchans").append(`<div class='a' num="`+index+`">`+correct+`<div class='matchdrop'></div></div>`) 
                    }
                    
                })
                    if(questions[guest.index].fake){
                    fak = questions[guest.index].fake;
                    if(fak.typ=="fakeans"){
                        if($.inArray("0",answers[guest.index].o)==-1){
                            console.log(answers[guest.index])
                            $('#matchq').append(`<div class='o' num='0'>`+fak.content+`</div>`)
                        }else{
                        }
                        
                        
                    }else if(fak.typ=="fakematch"){
                       
                        if($.inArray("0",answers[guest.index].a)!=-1&&answers[guest.index].o[$.inArray("0",answers[guest.index].a)]){
                             $("#matchans").append(`<div class='a' num="0">`+fak.content+`<div class='matchdrop'>`+`<div class='o' num="`+answers[guest.index].o[$.inArray("0",answers[guest.index].a)]+`">`+questions[guest.index].option[answers[guest.index].o[$.inArray("0",answers[guest.index].a)]-1]+`</div>`+`</div>`)
                        }else{
                            $("#matchans").append(`<div class='a' num="0">`+fak.content+`<div class='matchdrop'></div>`)
                        }
                        
                    }
                }  
                   questions[guest.index].option.forEach((option,i)=>{                       
                    let index = i+1;
                       if($('.o[num="'+index+'"]').length==0){
                           $("#matchq").append(`<div class='o' num="`+index+`">`+option+`</div>`)
                       }
                })    

                }else{
                $('#answers').html(`<div id='matchq'></div><div id='matchans'></div>`);
                questions[guest.index].option.forEach((option,i)=>{
                    let index = i+1;
                    $("#matchq").append(`<div class='o' num="`+index+`">`+option+`</div>`)
                })                
                questions[guest.index].correct.forEach((correct,i)=>{
                    let index = i+1;
                    $("#matchans").append(`<div class='a' num="`+index+`">`+correct+`<div class='matchdrop'></div></div>`)
                })
                if(questions[guest.index].fake){
                    fak = questions[guest.index].fake;
                    if(fak.typ=="fakeans"){
                        $("#matchq").append(`<div class='o' num="0">`+fak.content+`</div>`)
                    }else if(fak.typ=="fakematch"){
                        $("#matchans").append(`<div class='a' num="0">`+fak.content+`<div class='matchdrop'></div>`)
                    }
                }    
                
                }
                let divarr = $(".matchdrop").toArray();
                divarr.push($("#matchq")[0]);
                dragula(divarr,{
                accepts: (el,target,source,sibling)=>{
                    if(target.className.includes('matchdrop')){
                        if(target.getElementsByTagName('div').length==0){
                            return true;
                        }else{
                            return false;
                        }
                           
                    }else{
                        return true;
                    }
        }
    });
                
            }
            }
            
            
            
            
            
            
            
            

     //////////////////////////////////////////////QUILL.JS       
            
             var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'], // toggled buttons
        ['blockquote', 'code-block'],

        [{
         'header': 1
        }, {
         'header': 2
        }], // custom button values
        [{
         'list': 'ordered'
        }, {
         'list': 'bullet'
        }],
        [{
         'script': 'sub'
        }, {
         'script': 'super'
        }], // superscript/subscript
        [{
         'indent': '-1'
        }, {
         'indent': '+1'
        }], // outdent/indent
        [{
         'direction': 'rtl'
        }], // text direction

        [{
         'size': ['small', false, 'large', 'huge']
        }], // custom dropdown
        [{
         'header': [1, 2, 3, 4, 5, 6, false]
        }],

        [{
         'color': []
        }, {
         'background': []
        }], // dropdown with defaults from theme
        [{
         'font': []
        }],
        [{
         'align': []
        }],['link', 'image', 'video', 'formula'],

        ['clean'] // remove formatting button
    ];

    function quil(e) {
     var cont = document.getElementById(e)
     window.quill = new Quill(cont, {
         modules: {
             toolbar: toolbarOptions
         },
         theme: 'snow'
     });
 }            
</script>

</html>
